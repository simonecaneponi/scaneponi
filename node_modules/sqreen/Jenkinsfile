def test(version) {
    docker.image("node:${version}").inside {

        stage("npm install (node ${version})") {
            sh "rm -rf node_modules/"
            sh "npm version"
            sh "npm cache clean --force"
            sh "npm install"
        }

        stage("test (node ${version})") {
            try{
                sh "npm run test-ci"
            } finally {
                // publish JUnit results to Jenkins
                junit 'result.xml'
                // publish coverage build artifact
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'coverage', reportFiles: 'coverage.html', reportName: "Test Report (node ${version})"])
            }
        }
    }
}

def hasFailed = false
node('docker_build') {

    stage('SCM') {
        checkout scm
    }
    def targets = ["4.0.0", "4", "5.0.0", "5", "6.0.0", "6", "7.0.0", "7", "8.0.0", "8"]

    for (item in targets){
        try {
            test(item);
        } catch (e) {
            hasFailed = true;
        }
    }
}
if (hasFailed) {
    currentBuild.result = "FAILED"
    notifyFailed()
    throw e
}



def notifyFailed() {
    slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
