/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const UuidV4 = require('uuid/v4');
const FunctionPatcher = require('../functionPatcher');
const Whitelist = require('../whitelist');
const Utils = require('../../util');

const isEmitter = module.exports.isEmitter = module.exports._isEmitter = function (emitter) {

    return !!emitter.on && !!emitter.addListener && !!emitter.emit;
};

module.exports.enable = function (module, identity) {

    const Server = module.Server;
    const addListener = Server.prototype.addListener;
    const session = require('./util').getNS();

    const holder = {
        end: function () {},
        request: function () {

            return true;
        }
    };
    FunctionPatcher.patchFunction(holder, 'end', identity, 'ServerResponse.on');
    FunctionPatcher.patchFunction(holder, 'request', identity, 'Server.on');

    Server.prototype.addListener = function (type, listener) {

        if (type === 'request') {

            return addListener.apply(this, [type, function (req, res) {

                /*holder.request('request', req, res);
                    if (res.statusCode === 500) { // can we make sure of that ?
                    return;
                }*/

                if (!isEmitter(req) || !isEmitter(res)) {
                    return listener.apply(this, arguments);
                }

                const ipAddress = Utils.getXFFOrRemoteAddress(req) || '';
                const whiteListRange = Whitelist.ipIsWhiteListed(ipAddress);
                const whiteListPath = Whitelist.pathIsWhiteListed(req.url);
                if (whiteListRange || whiteListPath) {

                    req._sqreen_ip_whitelist = true;

                    const Feature = require('../../command/features');
                    if (Feature.read().whitelisted_metric) {
                        const Metric = require('../../metric');
                        Metric.addObservations([['whitelisted', whiteListRange || whiteListPath, 1]], new Date());
                    }
                }

                session.bindEmitter(req);
                session.bindEmitter(res);

                res.on('finish', () => {

                    req.__sqreen = undefined;
                    req.__sqreen_lookable = undefined;
                    req.__sqreen_res = undefined;
                    req.__sqreen_url = undefined;
                    req.__sqreen_uuid = undefined;

                    holder.end.apply(res, [req]);
                });

                // prevent double writing if request was sqreen_dropped
                // see rule-callback/utils.js:11
                const write = res.write;
                res.write = function () {

                    if (!this.__sqreen_finisehd) {
                        return write.apply(this, arguments);
                    }
                };

                session.run(() => {

                    // save url properly for sqreen
                    req.__sqreen_url = req.url;
                    req.__sqreen_res = res;

                    res.__original_end = res.end;
                    req.__sqreen_uuid = UuidV4();

                    session.set('req', req);
                    session.set('res', res);

                    if (holder.request()) {
                        return listener.apply(this, arguments);
                    }
                });
            }]);
        }

        return addListener.apply(this, arguments);
    };
    Server.prototype.on = Server.prototype.addListener; // see core: lib/events: EventEmitter.prototype.on = EventEmitter.prototype.addListener;
};
