/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Metric = require('../../metric');

const LOGIN = require('../../enums/metrics').LOGIN;
const Util = require('../../util');
const Logger = require('../../logger');

module.exports.getCbs = function () {

    return {
        pre: function (args, value, rule, selfObject, session) {

            Logger.INFO(`Sqreen login: has session: ${!!(session && session.req)}`);

            const userNameRank = selfObject && selfObject._passReqToCallback ? 1 : 0; // or Number(Boolean(sel...))

            const fieldName = selfObject && selfObject._usernameField || 'username';
            const ip = session && session.req &&  Util.getXFFOrRemoteAddress(session.req) || '';

            const userName = args[userNameRank];
            const done = args[args.length - 1];
            args[args.length - 1] = function (authErr, user, info) {

                const now = new Date();

                if (authErr || !user) {
                    // login fail
                    setImmediate(() => {

                        Metric.addObservations([[LOGIN.FAIL, { keys: [[fieldName, userName]], ip }, 1]], now);
                    });
                }
                else {
                    // login success
                    setImmediate(() => {

                        Metric.addObservations([[LOGIN.SUCCESS, { keys: [[fieldName, userName]], ip }, 1]], now);
                    });
                }
                done.apply(this, arguments);
            };
        }
    };
};
