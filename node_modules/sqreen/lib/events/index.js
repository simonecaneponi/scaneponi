/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Logger = require('../logger');
const Action = require('./action');
const TYPES = require('../enums/events').TYPE;

/**
 * Sqreen event queue
 */
const eventQueue = module.exports._eventQueue = [];
/**
 * Max length of the event queue
 */
const EVENT_QUEUE_MAX_LENGTH = 500;
const knownEvts = {};
knownEvts[TYPES.ATTACK] = {};
knownEvts[TYPES.ERROR] = {};

/**
 * add a new event to the queue, this will trigger a reporting
 * @param type
 * @param evt
 * @returns {Promise}
 */
module.exports.writeEvent = function (type, evt) {

    let force = false;
    knownEvts[type] = knownEvts[type] || {};
    // an attack for this rule has already been seen ?
    if (evt.rule_name) {
        force = !knownEvts[type][evt.rule_name];
        knownEvts[type][evt.rule_name] = true;
    }
    // an exception exists f
    else if (evt.klass) {
        force = !knownEvts[type][evt.klass];
        knownEvts[type][evt.klass] = true;
    }

    return new Promise((resolve) => {

        // It could be a setTimeout(f,0) if we do want to put this at the real end of the event loop
        setImmediate(() => {

            if (eventQueue.length >= EVENT_QUEUE_MAX_LENGTH){
                const shiftedEvt = eventQueue.shift();
                Logger.DEBUG(`Sqreen drops event ${shiftedEvt}`);
            }

            eventQueue.push({
                type,
                event: evt
            });

            setImmediate(() => {

                Action.trigger(eventQueue, force);
                return resolve();
            });
        });
    });
};

module.exports.drain = function () {

    Action.reportBatch(eventQueue);
};
