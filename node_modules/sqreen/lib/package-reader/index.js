/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
/**
 * This script is to be run at startup, therefore synchronous operations are permitted
 */
'use strict';
const Logger = require('../logger');
const Path = require('path');
const Fs = require('fs');
const Crypto = require('crypto');

// TODO: idea: get current module and explore its paths to find the dependency root and th package.json file
// TODO: ignore sqreen's deps

const superLister = function (root) {

    var todos = [root];
    var results = [];

    while (todos.length > 0) {

        var dirPath = todos.pop();
        var isNodeModules = dirPath.endsWith('node_modules');

        if (isNodeModules) {
            var content = Fs.readdirSync(dirPath);
            for (var i = 0; i < content.length; ++i) {
                var path = Path.join(dirPath, content[i]);
                const stat = Fs.lstatSync(path);
                if (stat.isDirectory() && !stat.isSymbolicLink()) { // handle cnpm
                    todos.push(path);
                }
            }
        }
        else {
            var path = Path.join(dirPath, 'package.json');
            if (Fs.existsSync(path)) {
                try {
                    var item = JSON.parse(Fs.readFileSync(Path.join(dirPath, 'package.json'), 'utf8'));
                    results.push({ name: item.name, version: item.version });
                    item = null;
                }
                catch (_) {
                    // ignore err
                }
            }
            var nmPath = Path.join(dirPath, 'node_modules');
            if (Fs.existsSync(nmPath)) {
                todos.push(nmPath)
            }
        }
    }

    return results;
};

const listModules = module.exports.listModules = function (root) {

    try {
        return Promise.resolve(superLister(root));
    }
    catch (err) {
        return Promise.reject(err);
    }
};

module.exports.readPackage = function (path) {

    let raw;

    try {
        raw = Fs.readFileSync(path, 'utf-8');
    }
    catch (err) {
        Logger.DEBUG(`Sqreen could not read the content of ${path}`);
        return;
    }

    let pkg = {};
    try {
        pkg = JSON.parse(raw);
    }
    catch (err) {
        Logger.INFO(`Sqreen could not parse the content of ${path}. Is it a valid JSON file ?`);
        return;
    }

    pkg._sq_path = path;
    return pkg;
};

let hashCache = '';
module.exports.getDependenciesHash = function (callback) {

    if (hashCache) {
        return callback(hashCache);
    }

    const baseDir = process.cwd();
    const hash = Crypto.createHash('sha1');

    const path = Path.join(baseDir, 'node_modules');
    const results = superLister(path).map((x) => x.name + '-' + x.version);

    hash.update(results.sort().join('|'));

    hashCache = hash.digest('hex');

    return callback(hashCache);
};

module.exports.getDependencies = function () {

    const baseDir = process.cwd();
    const baseDirContent = Fs.readdirSync(baseDir);
    if (baseDirContent.indexOf('node_modules') < 0) {
        Logger.DEBUG(`Sqreen has not found 'node_modules' directory in ${baseDir}`);
        return Promise.reject(new Error('no \'node_modules\' directory at project root'));
    }

    return listModules(Path.join(baseDir, 'node_modules'));
};
