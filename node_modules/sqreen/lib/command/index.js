/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Logger = require('../logger');
const Exception = require('../exception');
const Backend = require('../backend');
const Agent = require('../agent');
const Actions = require('./actions');

const AGENT_VERSION = require('../../package.json').version;

let responses = {};
const report = function (result) {

    Object.assign(responses, result);
    return Promise.resolve();
};

module.exports.getResponses = function () {

    const result = Object.assign({}, responses);
    responses = {};
    return result;
};

/**
 * Command executor
 * @param command
 */
module.exports.execute = function (command, isLogin) {

    if (!command.name || !command.uuid) {
        Logger.INFO('Sqreen tried to execute an empty command');
        return Promise.resolve();
    }
    command.params = command.params || [];

    if (Actions[command.name]) { // is the command known
        Logger.DEBUG(`execute command ${command.name} with params ${JSON.stringify(command.params)}`);

        if (isLogin && command.name === 'instrumentation_enable') { // rules come with payload
            const response = {};
            response[command.uuid] = {
                status: true,
                output: command.pack_id
            };
            return report(response);
        }

        return Actions[command.name](command.params, command.uuid)
            .then((output) => {

                const response = {};
                response[command.uuid] = {
                    status: true,
                    output
                };

                return report(response);
            })
            .catch((err) => {

                Logger.INFO(`Sqreen command ${command.name} failed`);
                const response = {};
                response[command.uuid] = {
                    status: false,
                    output: err && err.toString()
                };
                report(response);
                return Exception.report(err);
            });
    }
    Logger.INFO(`Command unsupported by Sqreen Agent ${AGENT_VERSION}: ${command.name}`);
    return Exception.report(new Error(`Command unsupported by Sqreen Agent ${AGENT_VERSION}: ${command.name}`));
};
