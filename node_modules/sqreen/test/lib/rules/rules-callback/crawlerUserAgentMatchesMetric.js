/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const CrawlerUAM = require('../../../../lib/rules/rules-callback/crawlerUserAgentMatchesMetric');

describe('CrawlerUserAgentMatchesMetricsCB', () => {

    describe('pre', () => {

        it('should return nothing', { plan: 4 }, (done) => {

            expect(CrawlerUAM.getCbs()).to.not.exist();
            expect(CrawlerUAM.getCbs({})).to.not.exist();
            expect(CrawlerUAM.getCbs({ data: {} })).to.not.exist();
            expect(CrawlerUAM.getCbs({ data: { values: [] } })).to.exist();
            done();
        });

        it('should perform tests on the thingy', { plan: 6 }, (done) => {

            const pre = CrawlerUAM.getCbs({ data: { values: [{ type: 'string', value: 'a' }] } }).pre;

            expect(pre()).to.not.exist();
            expect(pre([])).to.not.exist();
            expect(pre([{}])).to.not.exist();
            expect(pre([{ headers: {} }])).to.not.exist();
            expect(pre([{ headers: { 'user-agent': 'poney' } }])).to.not.exist();
            expect(pre([{ headers: { 'user-agent': 'poaop' } }])).to.equal({ observations: [['crawler', 'poaop', 1]] });
            done();
        });
    });
});






