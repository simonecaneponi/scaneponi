/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const UserAgentMaches = require('../../../../lib/rules/rules-callback/userAgentMatches');
const Http = require('http');

describe('UserAgentMaches', () => {

    describe('pre', () => {

        it('should not return any matcher', { plan: 3 }, (done) => {

            expect(UserAgentMaches.getCbs()).to.not.exist();
            expect(UserAgentMaches.getCbs({})).to.not.exist();
            expect(UserAgentMaches.getCbs({ data: {} })).to.not.exist();
            done();
        });

        it('should return a matcher', { plan: 11 }, (done) => {

            const rule = {
                data: {
                    values: [{
                        type: 'string',
                        value: 'hello'
                    }]
                }
            };

            const pre = UserAgentMaches.getCbs(rule).pre;
            expect(pre).to.exist();
            expect(pre).to.be.a.function();

            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};


            const notReq = { '0': 'r', '1': incomingMessage, '2': serverResponse };
            expect(pre(notReq)).to.not.exist();

            const noArg1 = { '0': 'request', '1': null, '2': serverResponse };
            expect(pre(noArg1)).to.not.exist();

            const noArg2 = { '0': 'request', '1': incomingMessage, '2': null };
            expect(pre(noArg2)).to.not.exist();

            const noUa = { '0': 'request', '1': incomingMessage, '2': serverResponse };
            expect(pre(noUa)).to.not.exist();

            const noFilteredUa = { '0': 'request', '1': incomingMessage, '2': serverResponse };
            noFilteredUa[1].headers = { 'user-agent': 'mozilla' };
            expect(pre(noFilteredUa)).to.not.exist();

            const filteredUa = { '0': 'request', '1': incomingMessage, '2': serverResponse };
            filteredUa[1].headers = { 'user-agent': 'helloMozilla' };
            const result = pre(filteredUa, null, { block: true });
            expect(result).to.exist();
            expect(result).to.equal({ status: 'raise', record: { found: 'hello' } });


            const result2 = pre(filteredUa);
            expect(result2).to.exist();
            expect(result2).to.equal({ record: { found: 'hello' } });
            done();
        });
    });
});
