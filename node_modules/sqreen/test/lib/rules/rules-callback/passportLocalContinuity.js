/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Pre = require('../../../../lib/rules/rules-callback/passportLocalContinuity').getCbs().pre;

describe('passportLocalContinuity', () => {

    it('should not really do anything', { plan: 1 }, (done) => {

        const session = { req: 1, res: 2, raw: { set: function () {

            done(new Error());
        } } };

        Pre(['a'], null, null, null, session);
        expect(session.req).to.equal(1);
        done();
    });

    it('should recreate continuity', { plan: 4 }, (done) => {

        let i = 0;
        const session = {
            raw: {
                set: function (key, toSet) {

                    if (i === 0) {
                        expect(toSet).to.equal({ a: 1, __sqreen_res: 10 });
                        expect(key).to.equal('req');
                        i++;
                    }
                    else {
                        expect(toSet).to.equal(10);
                        expect(key).to.equal('res');
                        done();
                    }
                }
            }
        };

        Pre([{ a: 1, __sqreen_res: 10 }], null, null, null, session);
    });

    it('should recreate continuity', { plan: 4 }, (done) => {

        let i = 0;
        const session = {
            raw: {
                set: function (key, toSet) {

                    if (i === 0) {
                        expect(toSet).to.equal({ a: 1, __sqreen_res: 10 });
                        expect(key).to.equal('req');
                        i++;
                    }
                    else {
                        expect(toSet).to.equal(10);
                        expect(key).to.equal('res');
                        done();
                    }
                }
            }
        };

        Pre([{ a: 1, __sqreen_res: 10 }], null, null, {}, session);
    });

    it('should recreate continuity', { plan: 4 }, (done) => {

        let i = 0;
        const session = {
            raw: {
                active: {},
                set: function (key, toSet) {

                    if (i === 0) {
                        expect(toSet).to.equal({ a: 1, __sqreen_res: 10 });
                        expect(key).to.equal('req');
                        i++;
                    }
                    else {
                        expect(toSet).to.equal(10);
                        expect(key).to.equal('res');
                        done();
                    }
                }
            }
        };

        Pre([{ a: 1, __sqreen_res: 10 }], null, null, {}, session);
    });

    it('should recreate continuity outside of ran namespace', { plane: 5 }, (done) => {

        const selfItem = {
            _verify: function (x, cb) {

                expect(x).to.equal(1);
                return cb();
            }
        };

        let i = 0;
        const session = {
            raw: {
                run: function (cb) {

                    return cb();
                },
                set: function (key, toSet) {

                    if (i === 0) {
                        expect(toSet).to.equal({ a: 1, __sqreen_res: 10 });
                        expect(key).to.equal('req');
                        i++;
                    }
                    else {
                        expect(toSet).to.equal(10);
                        expect(key).to.equal('res');
                    }
                }
            }
        };

        Pre([{ a: 1, __sqreen_res: 10 }], null, null, selfItem, session);

        selfItem._verify(1, done);
    });
});

