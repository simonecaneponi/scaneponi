/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

describe('passport-local-metric', () => {

    it('should patch and check an auth', { plan: 4 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportSAMLMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-success');
                        expect(obs[0][1].keys[0][0]).to.equal('username');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, null);
        args[1](null, { username: 'jean' });
    });

    it('should patch and check an auth', { plan: 0 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportSAMLMetric',
            {
                '../../metric': {
                    addObservations: function () {

                        done(new Error());
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, {});
        args[1](null, { username: undefined });
        done();
    });


    it('should patch and check an auth', { plan: 0 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportSAMLMetric',
            {
                '../../metric': {
                    addObservations: function () {

                        done(new Error());
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, { req: {} });
        args[1](null, { pony: 'jean' });
        done();
    });

    it('should patch and check an auth', { plan: 4 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportSAMLMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-fail');
                        expect(obs[0][1].keys[0][0]).to.equal('username');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, { req:  { headers: { 'x-forwarded-for': '8.8.8.8' } } });
        args[1](new Error(), { username: 'jean' });
    });
});
