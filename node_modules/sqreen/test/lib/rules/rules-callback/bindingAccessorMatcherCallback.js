/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const BindingAccessorMatcherCallback = require('../../../../lib/rules/rules-callback/bindingAccessorMatcherCallback')._.BindingAccessorMatcherCallback;

describe('BindingAccessorMatcherCallback', () => {

    it('should do a basic CRS detection', { plan: 1 }, (done) => {

        const instance = new BindingAccessorMatcherCallback({
            data: {
                values: [
                    {

                        'binding_accessor': [
                            '#.sess[\'query\']',
                            '#.sess[\'body\']',
                            '#.sess[\'url\']'
                        ],
                        'id': '950000',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value': 'aaaaaa'
                        }
                    },
                    {

                        'binding_accessor': [
                            '#.sess[\'url\']'
                        ],
                        'id': '950001',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value': '^(?:ht|f)tps?:\/\/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'
                        }
                    }
                ]
            }
        });

        const result1 = instance.action({
            req: {
                query: '',
                body: {},
                url: 'http://127.0.0.1'
            }
        });

        expect(result1).to.equal({
            record: {
                id: '950001',
                binding_accessor: '#.sess[\'url\']',
                matcher: '^(?:ht|f)tps?:\/\/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})',
                found: 'http://127.0.0.1'
            }
        });

        done();
    });

    it('should do a basic CRS detection that blocks', { plan: 1 }, (done) => {

        const instance = new BindingAccessorMatcherCallback({
            block: true,
            data: {
                values: [
                    {

                        'binding_accessor': [
                            '#.sess[\'body\']',
                            '#.sess[\'url\']'
                        ],
                        'id': '950000',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value': 'aaaaaa'
                        }
                    },
                    {

                        'binding_accessor': [
                            '#.sess[\'url\']'
                        ],
                        'id': '950001',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value': '^(?:ht|f)tps?:\/\/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'
                        }
                    }
                ]
            }
        });

        const result1 = instance.pre({}, null, null, null, {
            req: {
                body: '',
                url: 'http://127.0.0.1'
            }
        });

        expect(result1).to.equal({
            status: 'raise',
            record: {
                id: '950001',
                binding_accessor: '#.sess[\'url\']',
                matcher: '^(?:ht|f)tps?:\/\/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})',
                found: 'http://127.0.0.1'
            }
        });

        done();
    });

    it('should do a basic CRS detection but not foind anything', { plan: 1 }, (done) => {

        const instance = new BindingAccessorMatcherCallback({
            data: {
                values: [
                    {

                        'binding_accessor': [
                            '#.sess[\'url\']'
                        ],
                        'id': '950000',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value': 'aaaaaa'
                        }
                    }
                ]
            }
        });

        const result1 = instance.action({
            req: {
                url: 'http://127.0.0.1'
            }
        });

        expect(result1).to.equal(null);

        done();
    });

    it('should do a basic CRS detection but not foind anything', { plan: 2 }, (done) => {

        const instance = new BindingAccessorMatcherCallback({
            data: {
                values: [
                    {

                        'binding_accessor': [
                            '#.sess[\'urls\'] | flat_values'
                        ],
                        'id': '950000',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value':  '^(?:ht|f)tps?:\/\/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'
                        }
                    }
                ]
            }
        });

        const result1 = instance.action({
            req: {
                urls: ['hello', 'http://127.0.0.1']
            }
        });

        expect(result1).to.exist();
        expect(result1.record.found).to.equal('http://127.0.0.1');

        done();
    });

    it('should do a basic CRS detection but not find anything because of length', { plan: 1 }, (done) => {

        const instance = new BindingAccessorMatcherCallback({
            data: {
                values: [
                    {

                        'binding_accessor': [
                            '#.sess[\'urls\'] | flat_values'
                        ],
                        'id': '950000',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'regexp',
                            'value':  '^(?:ht|f)tps?:\/\/(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})',
                            min_length: 20
                        }
                    }
                ]
            }
        });

        const result1 = instance.action({
            req: {
                urls: ['hello', 'http://127.0.0.1']
            }
        });

        expect(result1).to.not.exist();
        done();
    });

    it('should do a basic CRS detection and find a substring', { plan: 3 }, (done) => {

        const instance = new BindingAccessorMatcherCallback({
            data: {
                values: [
                    {

                        'binding_accessor': [
                            '#.sess[\'urls\'] | flat_values'
                        ],
                        'id': 'a',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'string',
                            'value':  'http://',
                            min_length: 20
                        }
                    },
                    {

                        'binding_accessor': [
                            '#.sess[\'urls\'] | flat_values'
                        ],
                        'id': 'b',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'string',
                            'value':  'http://'
                        }
                    },
                    {

                        'binding_accessor': [
                            '#.sess[\'urls\'] | flat_values'
                        ],
                        'id': 'd',
                        'matcher': {
                            'case_sensitive': false,
                            'type': 'string',
                            'value':  '' // this one for coverage
                        }
                    }
                ]
            }
        });

        const result1 = instance.action({
            req: {
                urls: ['hello', 'http://127.0.0.1']
            }
        });

        expect(result1).to.exist();
        expect(result1.record.found).to.equal('http://127.0.0.1');
        expect(result1.record.id).to.equal('b');

        done();
    });

    it('should test getCbs', { plan: 4 }, (done) => {

        const getCbs = require('../../../../lib/rules/rules-callback/bindingAccessorMatcherCallback').getCbs;

        expect(getCbs()).to.equal(null);
        expect(getCbs({})).to.equal(null);
        expect(getCbs({ data: {} })).to.equal(null);
        expect(getCbs({ data: { values: [] } })).to.exist();
        done();

    });
});
