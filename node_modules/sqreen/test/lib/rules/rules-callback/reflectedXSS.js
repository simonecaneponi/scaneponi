/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

describe('reflectedXSS', () => {

    describe('pre', () => {

        it('should not do anything', { plan: 1 }, (done) => {

            const input = [
                ['aa<'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                {  }
            ];
            const pre = require('../../../../lib/rules/rules-callback/reflectedXSS').getCbs({ data: { values: ['aa', 'bb'] }, block: true }).pre;
            expect(pre.apply(null, input)).to.not.exist();
            done();
        });

        it('should find a xss and block it', { plan: 5 }, (done) => {

            const input = [
                ['aa<'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                { req: { stuff: 'oo', params: { id: 'aa<' } } }
            ];
            const pre = Proxyquire('../../../../lib/rules/rules-callback/reflectedXSS', {
                '../../instrumentation/patch': {
                    _actOnCbResult: function (resultList, session) {

                        const output = resultList[0];
                        expect(session.req.stuff).to.equal('oo');
                        expect(session.req.params).to.equal({ id: 'aa<' });
                        expect(output.record).to.exist();
                        expect(output.record).to.equal({ found: 'aa', payload: 'aa<' });
                        expect(input[0][0]).to.equal('aa&lt;');
                        done();
                    }
                }
            }).getCbs({ data: { values: ['aa', 'bb'] }, block: true }).pre;
            pre.apply(null, input);
        });

        it('should find a xss and block it using the cache', { plan: 5 }, (done) => {

            const input = [
                ['dahfdash'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                { req: { stuff: 'oo', params: { id: 'aa<' } } }
            ];
            const pre = Proxyquire('../../../../lib/rules/rules-callback/reflectedXSS', {
                '../../instrumentation/patch': {
                    _actOnCbResult: function (resultList, session) {

                        const output = resultList[0];
                        expect(session.req.stuff).to.equal('oo');
                        expect(session.req.params).to.equal({ id: 'aa<' });
                        expect(output.record).to.exist();
                        expect(output.record).to.equal({ found: 'aa', payload: 'aa<' });
                        expect(input[0][0]).to.equal('aa&lt;');
                        done();
                    }
                }
            }).getCbs({ data: { values: ['aa', 'bb'] }, block: true }).pre;
            pre.apply(null, input);
            input[0][0] = 'aa<';
            pre.apply(null, input);
        });

        it('should find a xss and not block it', { plan: 5 }, (done) => {

            const input = [
                ['aa<'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                { req: { stuff: 'oo', params: { id: 'aa<' } } }
            ];
            const pre = Proxyquire('../../../../lib/rules/rules-callback/reflectedXSS', {
                '../../instrumentation/patch': {
                    _actOnCbResult: function (resultList, session) {

                        const output = resultList[0];
                        expect(session.req.stuff).to.equal('oo');
                        expect(session.req.params).to.equal({ id: 'aa<' });
                        expect(output.record).to.exist();
                        expect(output.record).to.equal({ found: 'aa', payload: 'aa<' });
                        expect(input[0][0]).to.equal('aa<');
                        done();
                    }
                }
            }).getCbs({ data: { values: ['aa', 'bb'] }, block: false }).pre;
            pre.apply(null, input);
        });

        it('should not find a xss', { plan: 1 }, (done) => {

            const input = [
                ['cc'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                { req: { stuff: 'oo', params: { id: 'aa<' } } }
            ];
            const pre = Proxyquire('../../../../lib/rules/rules-callback/reflectedXSS', {
                '../../instrumentation/patch': {
                    _actOnCbResult: function () {

                        done(new Error('should not have been called'));
                    }
                }
            }).getCbs({ data: { values: ['aa', 'bb'] }, block: false }).pre;
            pre.apply(null, input);
            expect(input[0][0]).to.equal('cc');
            done();
        });

        it('should not find a xss and not escape it', { plan: 1 }, (done) => {

            const input = [
                ['cc<'],
                null,
                { data: { values: ['aa', 'bb'] } },
                null,
                { req: { stuff: 'oo', params: { id: 'cc<' } } }
            ];
            const pre = Proxyquire('../../../../lib/rules/rules-callback/reflectedXSS', {
                '../../instrumentation/patch': {
                    _actOnCbResult: function () {

                        done(new Error('should not have been called'));
                    }
                }
            }).getCbs({ data: { values: ['aa', 'bb'] }, block: true }).pre;
            pre.apply(null, input);
            expect(input[0][0]).to.equal('cc<');
            done();
        });
    });

    describe('constructor', () => {

        const Mod = require('../../../../lib/rules/rules-callback/reflectedXSS');
        const getCb = Mod.getCbs;

        it('should build the cb', { plan: 6 }, (done) => {

            expect(getCb().patternList).to.equal([]);
            expect(getCb({}).patternList).to.equal([]);
            expect(getCb({ data: {} }).patternList).to.equal([]);
            expect(getCb({ data: { values: ['a'] } }).patternList).to.equal(['a']);
            expect(getCb().block).to.be.false();
            expect(getCb({ block: true }).block).to.be.true();
            done();
        });
    });
});
