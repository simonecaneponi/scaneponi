/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const CallbackBuilder = require('../../../../lib/rules/rules-callback/callbackBuilder');

describe('CallbackBuilder', () => {

    describe('_bindThis', () => {

        it('should return nothing', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('', [])).to.not.exist();
            done();
        });

        it('should return cwd', { plan: 2 }, (done) => {

            expect(CallbackBuilder._bindThis('#.cwd')).to.equal(process.cwd());
            expect(CallbackBuilder._bindThis('#.cwd')).to.exist();
            done();
        });

        it('should return nothing for an unknown key', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#aaaa')).to.not.exist();
            done();
        });

        it('should return a string', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('\'hello\'')).to.equal('hello');
            done();
        });

        it('should return an integer', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('42')).to.equal(42);
            done();
        });

        it('should return data', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data', null, null, null, { data: 'hello' }, null, {})).to.equal('hello');
            done();
        });

        it('should return subdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\']', null, null, null, { data: { value: 'hello' } })).to.equal('hello');
            done();
        });

        it('should return subdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\']', null, null, null, { data: { value: 'hello' } })).to.equal('hello');
            done();
        });

        it('should return request_params', { plan: 7 }, (done) => {

            expect(CallbackBuilder._bindThis('#.request_params', null, null, null, null)).to.equal({});
            expect(CallbackBuilder._bindThis('#.request_params', null, null, null, null, null, { cookies: { a: 1 } })).to.equal({ a: 1 });
            expect(CallbackBuilder._bindThis('#.request_params', null, null, null, null, null, { cookies: { a: 1 }, headers: { b: 2 }, body: { c: 3 } })).to.equal({ a: 1, c: 3 });
            expect(CallbackBuilder._bindThis('#.request_params', null, null, null, null, null, { __sqreen_lookup: {} })).to.equal({});
            expect(CallbackBuilder._bindThis('#.request_params', null, null, null, null, null, { __sqreen_lookup: { hapi: {} } })).to.equal({});
            expect(CallbackBuilder._bindThis('#.request_params', null, null, null, null, null, { cookies: {}, body: { b:2 }, __sqreen_lookup: { hapi: { payload: { a: 1 } } } })).to.equal({ a: 1, b:2 });


            expect(CallbackBuilder._bindThis('#.sess[\'cookies\']', null, null, null, null, null, { cookies: { b: 'b' }, body: { b:2 }, __sqreen_lookup: { hapi: { state: { a: 'a' } } } })).to.equal({ a: 'a', b: 'b' });
            done();
        });


        it('should return filtered_request_params', { plan: 7 }, (done) => {

            expect(CallbackBuilder._bindThis('#.filtered_request_params', null, null, null, null)).to.equal({});
            expect(CallbackBuilder._bindThis('#.filtered_request_params', null, null, null, null, null, { cookies: { a: 1 } })).to.equal({});
            expect(CallbackBuilder._bindThis('#.filtered_request_params', null, null, null, null, null, { cookies: { a: 1 }, headers: { b: 2 }, body: { c: 3 } })).to.equal({ c: 3 });
            expect(CallbackBuilder._bindThis('#.filtered_request_params', null, null, null, null, null, { __sqreen_lookup: {} })).to.equal({});
            expect(CallbackBuilder._bindThis('#.filtered_request_params', null, null, null, null, null, { __sqreen_lookup: { hapi: {} } })).to.equal({});
            expect(CallbackBuilder._bindThis('#.filtered_request_params', null, null, null, null, null, { cookies: {}, body: { b:2 }, __sqreen_lookup: { hapi: { payload: { a: 1 } } } })).to.equal({ a: 1, b:2 });


            expect(CallbackBuilder._bindThis('#.sess[\'cookies\']', null, null, null, null, null, { cookies: { b: 'b' }, body: { b:2 }, __sqreen_lookup: { hapi: { state: { a: 'a' } } } })).to.equal({ a: 'a', b: 'b' });
            done();
        });

        it('should return subdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\']', null, null, null, { data: { value: undefined } })).to.equal(undefined);
            done();
        });

        it('should return subdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\']', null, null, null, { data: { value: 0 } })).to.equal(0);
            done();
        });

        it('should return flattened subdata', { plan: 12 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\'] | flat_keys', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal(['a', 'b', 'c']);
            expect(CallbackBuilder._bindThis('#.data[\'value\']| flat_keys', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal(['a', 'b', 'c']);
            expect(CallbackBuilder._bindThis('#.data[\'value\']|flat_keys', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal(['a', 'b', 'c']);
            expect(CallbackBuilder._bindThis('#.data[\'value\'] |flat_keys', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal(['a', 'b', 'c']);

            expect(CallbackBuilder._bindThis('#.data[\'value\'] | flat_keys', null, null, null, { data: { value: 10 } })).to.equal([10]);
            expect(CallbackBuilder._bindThis('#.data[\'value\'] | flat_values', null, null, null, { data: { value: 10 } })).to.equal([10]);

            expect(CallbackBuilder._bindThis('#.data[\'value\'] | flat_values', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal([1, 10]);
            expect(CallbackBuilder._bindThis('#.data[\'value\']| flat_values', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal([1, 10]);
            expect(CallbackBuilder._bindThis('#.data[\'value\']|flat_values', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal([1, 10]);
            expect(CallbackBuilder._bindThis('#.data[\'value\'] |flat_values', null, null, null, { data: { value: { a: { b: 1 }, c: 10 } } })).to.equal([1, 10]);

            const circ = { a: 1 };
            circ.circ = circ;
            expect(CallbackBuilder._bindThis('#.data[\'value\'] |flat_values', null, null, null, { data: { value: circ } })).to.equal([1,{}]);
            expect(CallbackBuilder._bindThis('#.data[\'value\'] |flat_keys', null, null, null, { data: { value: circ } })).to.equal(['a', 'circ']);
            done();
        });

        it('should return subdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\']', null, null, null, { data: { value: '' } })).to.equal('');
            done();
        });

        it('should return subsubdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\'][\'sub\'][0]', null, null, null, { data: { value: { sub: ['hello'] } } })).to.equal('hello');
            done();
        });

        it('should return subsubdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'value\'][\'sub\'][\'a\']', null, null, null, { data: { value: { sub: 'hello' } } })).to.equal(undefined);
            done();
        });

        it('should fail to return subsubdata', { plan: 1 }, (done) => {

            try {
                CallbackBuilder._bindThis('#.data[\'value\'][\'sub\'][\'a\'][\'b\']', null, null, null, { data: { value: { sub: 'hello' } } });
            }
            catch (err) {
                expect(err.message).to.contains('\'b\'');
                done();
            }
        });

        it('should return subsubdata', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.data[\'headers\'][\'user-agent\']', null, null, null, { data: { headers: { 'user-agent': 'hello' } } })).to.equal('hello');
            done();
        });

        it('should return a stacktrace', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindThis('#.caller')).to.contains('/test/lib/rules/rules-callback/callbackBuilder');
            done();
        });

        it('should take the remote ip address from standard location', { plan: 4 }, (done) => {

            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { headers: { }, connection: { remoteAddress: '100.0.0.1' } })).to.equal('100.0.0.1');
            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { connection: { remoteAddress: '100.0.0.1' } })).to.equal('100.0.0.1');
            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { connection: { } })).to.equal('');
            expect(CallbackBuilder._bindThis('#.client_ip[lhjads', null, null, null, null, null, { connection: { } })).to.equal('');
            done();
        });

        it('should take the remote ip address from x-forwarded-for', { plan: 2 }, (done) => {

            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { headers: { 'x-forwarded-for': '127.0.0.1, 100.0.0.2' }, connection: { remoteAddress: '100.0.0.1' } })).to.equal('100.0.0.2');
            expect(CallbackBuilder._bindThis('#.client_ip', null, null, null, null, null, { headers: { 'x-forwarded-for': '100.0.0.2' } })).to.equal('100.0.0.2');
            done();
        });
    });

    describe('_bindAccessors', () => {

        it('should binf a list of accessors', { plan: 1 }, (done) => {

            expect(CallbackBuilder._bindAccessors(['#.args[0]', '\'{}\'', '#.rv', 'function () {}'], ['hello'], 'world', {}, {})).to.equal(['hello', '{}', 'world']);
            done();
        });
    });

    describe('_build', () => {

        it('should build a simple callback without return value', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['function () {}']);
            expect(result).to.exist();
            expect(result()).to.not.exist();
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return x + 1; }']);
            expect(result).to.exist();
            expect(result([1])).to.equal(2);
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: \'skip\' }; }'], {}, { block: true });
            expect(result).to.exist();
            expect(result([1])).to.equal({ status: 'skip' });
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: \'skip\' }; }'], {},  { block: false });
            expect(result).to.exist();
            expect(result([1])).to.equal({ status: null });
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return; }'], null, { block: false });
            expect(result).to.exist();
            expect(result([1])).to.not.exist();
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: null }; }'], null, { block: true });
            expect(result).to.exist();
            expect(result([1])).to.equal({ status: null });
            done();
        });

        it('should build a simple callback', { plan: 2 }, (done) => {

            const result = CallbackBuilder._build(['#.args[0]', 'function (x) { return { status: null }; }'], null, { block: true });
            expect(result).to.exist();
            expect(result([1], null, null, {})).to.equal({ status: null });
            done();
        });


        it('should build a simple callback with call and new rv', { plan: 2 }, (done) => {

            const f0 = CallbackBuilder._build(['#.rv', 'function (x) { return x + 10; }']);
            const fa = CallbackBuilder._build(['function () { return { call: \'f0\', data: 1 }; }'], { f0 });
            expect(fa).to.exist();
            expect(fa(null, null, {}, null)).to.equal(11);
            done();
        });

        it('should build a simple callback with call and new args', { plan: 2 }, (done) => {

            const f0 = CallbackBuilder._build(['#.args', 'function (x) { return x + 10; }']);
            const fa = CallbackBuilder._build(['function () { return { call: \'f0\', args: 1 }; }'], { f0 });
            expect(fa).to.exist();
            expect(fa(null, null, {}, null)).to.equal(11);
            done();
        });
    });

    describe('getCbs', () => {

        it('should build the callbacks of a rule', { plan: 3 }, (done) => {

            const result = CallbackBuilder.getCbs({
                callbacks: {
                    nodejs: {
                        pre: ['function () { return { call: \'f0\', args: 1 }; }'],
                        f0: ['#.args', 'function (x) { return x + 10; }']
                    }
                },
                data: {}
            });

            expect(result).to.exist();
            expect(result.pre).to.exist();
            expect(result.pre(null, null, {}, null, {})).to.equal(11);
            done();
        });

        it('should build the callbacks that throws', { plan: 5 }, (done) => {

            const result = CallbackBuilder.getCbs({
                callbacks: {
                    nodejs: {
                        pre: ['10','function () { x = null; x.a.b = 1 }']
                    }
                },
                data: {}
            });

            expect(result).to.exist();
            expect(result.pre).to.exist();
            try {
                result.pre(null, null, {}, null, {});
            }
            catch (err) {
                expect(err).to.exist();
                expect(err.message).to.equal('Cannot read property \'a\' of null');
                expect(err.args).to.equal([10]);
                done();

            }
        });

        it('should build the callbacks that throws a non error', { plan: 5 }, (done) => {

            const result = CallbackBuilder.getCbs({
                callbacks: {
                    nodejs: {
                        pre: ['10','function () { throw 1 }']
                    }
                },
                data: {}
            });

            expect(result).to.exist();
            expect(result.pre).to.exist();
            try {
                result.pre(null, null, {}, null, {});
            }
            catch (err) {
                expect(err).to.exist();
                expect(err.message).to.equal('1');
                expect(err.args).to.equal([10]);
                done();

            }
        });

        it('should fail to build the callbacks of a rule', { plan: 1 }, (done) => {

            const result = CallbackBuilder.getCbs({
                callbacks: {
                    pre: ['function () { return { call: \'f0\', args: 1 }; }'],
                    f0: ['#.args', 'function (x) { return x + 10; ']
                }
            });

            expect(result).to.not.exist();
            done();
        });
    });
});
