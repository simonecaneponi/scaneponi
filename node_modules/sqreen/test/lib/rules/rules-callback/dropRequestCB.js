/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const GetCB = (rule) => require('../../../../lib/rules/rules-callback').DropRequestCB(rule);

describe('DropRequestCB', () => {

    it('should not build the cb', { plan: 4 }, (done) => {

        expect(GetCB()).to.not.exists();
        expect(GetCB({})).to.not.exists();
        expect(GetCB({ data: {} })).to.not.exists();
        expect(GetCB({ data: { values: [] } })).to.not.exists();
        done();
    });

    it('should not built an absurd rule', { plan : 1 }, (done) => {

        try {
            GetCB({ data: { values: [{ type: 'pony' }] } }).pre;
        }
        catch (err) {
            expect(err.message).to.equal('unknown type pony in DropRequestCB');
        }
        done();
    });

    it('should build a custom_error_page', { plan: 4 }, (done) => {

        const cb = GetCB({ data: { values: [{ type: 'custom_error_page' }] } }).pre;
        const res = cb([[null, null, {
            write: function (str) {

                expect(str).to.exist();
            },
            writeHead: function (code) {

                expect(code).to.equal(500);
            },
            __original_end: function () {

                expect(1).to.equal(1);
            }
        }]]);

        expect(res).to.equal({ status: 'skip' });
        done();
    });

    it('should build a custom_error_page with code', { plan: 4 }, (done) => {

        const cb = GetCB({ data: { values: [{ type: 'custom_error_page', status_code: 403 }] } }).pre;
        const res = cb([[null, null, {
            write: function (str) {

                expect(str).to.exist();
            },
            writeHead: function (code) {

                expect(code).to.equal(403);
            },
            end: function () {

                expect(1).to.equal(1);
            }
        }]]);

        expect(res).to.equal({ status: 'skip' });
        done();
    });

    it('should build a redirection', { plan: 4 }, (done) => {

        const cb = GetCB({ data: { values: [{ type: 'redirection', redirection_url: 'http://google.com' }] } }).pre;
        const res = cb([[null, null, {
            writeHead: function (code, headers) {

                expect(code).to.equal(303);
                expect(headers).to.equal({ Location: 'http://google.com' });
            },
            end: function () {

                expect(1).to.equal(1);
            }
        }]]);

        expect(res).to.equal({ status: 'skip' });
        done();
    });

    it('should fail to build a redirection', { plan: 1 }, (done) => {

        try {
            GetCB({ data: { values: [{ type: 'redirection' }] } }).pre;
        }
        catch (err) {
            expect(err.message).to.equal('redirection without target');
        }
        done();
    });
});
