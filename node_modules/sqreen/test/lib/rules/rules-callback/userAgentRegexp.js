/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const UserAgentRegexp = require('../../../../lib/rules/rules-callback/userAgentRegexp');
const Http = require('http');

const headers = [
    '.*evilScanner.*',
    '.*arachni.*'
];

describe('UserAgentRegexp', () => {

    describe('pre', () => {

        it('should find a forbidden user agent', { plan: 3 }, (done) => {

            const rule = {
                block: true,
                data: {
                    values: headers
                }
            };

            const Pre = UserAgentRegexp.getCbs(rule).pre;
            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};

            const input = ['request', incomingMessage, serverResponse];

            input[1].headers = { 'user-agent': 'arachni' };

            const result = Pre(input, null, rule);

            expect(result).to.exist();
            expect(result.status).to.equal('raise');
            expect(result.record).to.equal({ found: '.*arachni.*' });

            done();
        });

        it('should find a forbidden user agent and not block', { plan: 3 }, (done) => {

            const rule = {
                block: false,
                data: {
                    values: headers
                }
            };

            const Pre = UserAgentRegexp.getCbs(rule).pre;
            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};

            const input = ['request', incomingMessage, serverResponse];

            input[1].headers = { 'user-agent': 'arachni' };

            const result = Pre(input, null, rule);

            expect(result).to.exist();
            expect(result.status).to.not.exist();
            expect(result.record).to.equal({ found: '.*arachni.*' });

            done();
        });

        it('should not find a forbidden user agent', { plan: 1 }, (done) => {

            const rule = {
                block: false,
                data: {
                    values: headers
                }
            };

            const Pre = UserAgentRegexp.getCbs(rule).pre;
            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};

            const input = ['request', incomingMessage, serverResponse];

            input[1].headers = { 'user-agent': 'khfehasfb' };

            const result = Pre(input, null, null);

            expect(result).to.not.exist();

            done();
        });

        it('should not find any user agent', { plan: 1 }, (done) => {

            const rule = {
                block: false,
                data: {
                    values: headers
                }
            };

            const Pre = UserAgentRegexp.getCbs(rule).pre;
            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};

            const input = ['request', incomingMessage, serverResponse];

            const result = Pre(input, null, null);

            expect(result).to.not.exist();

            done();
        });

        it('should not find any user agent', { plan: 1 }, (done) => {

            const rule = {
                block: false,
                data: {
                    values: headers
                }
            };

            const matcher = UserAgentRegexp.getCbs(rule);

            matcher.superMatcher = {
                match: function () {

                    return true;
                }
            };
            const Pre = matcher.pre;
            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.headers = {
                'user-agent': 'sd;kjs'
            };

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};

            const input = ['request', incomingMessage, serverResponse];

            const result = Pre(input, null, null);

            expect(result).to.not.exist();

            done();
        });

        it('should trigger coverage with diverse scenarios', { plan: 6 }, (done) => {

            const rule = {
                block: false,
                data: {
                    values: headers
                }
            };

            const Pre = UserAgentRegexp.getCbs(rule).pre;

            expect(UserAgentRegexp.getCbs()).to.not.exist();
            expect(UserAgentRegexp.getCbs({})).to.not.exist();
            expect(UserAgentRegexp.getCbs({ data: {} })).to.not.exist();

            const incomingMessage = new Http.IncomingMessage();

            incomingMessage.socket = {
                end: function () {}
            };

            const serverResponse = new Http.ServerResponse({ method: 'GET' });
            serverResponse.writeHead = function () {};
            serverResponse.end = function () {};

            const input1 = [';dhfas', incomingMessage, serverResponse];
            const result1 = Pre(input1, null, null);
            expect(result1).to.not.exist();

            const input2 = ['request', null, serverResponse];
            const result2 = Pre(input2, null, null);
            expect(result2).to.not.exist();

            const input3 = ['request', incomingMessage, null];
            const result3 = Pre(input3, null, null);
            expect(result3).to.not.exist();

            done();
        });
    });
});
