/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

describe('passport-local-metric', () => {

    it('should patch and check an auth', { plan: 4 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportLocalMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-fail');
                        expect(obs[0][1].keys[0][0]).to.equal('username');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, null, null);
        args[1]();
    });

    it('should patch and check an auth', { plan: 4 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportLocalMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-fail');
                        expect(obs[0][1].keys[0][0]).to.equal('username');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            {},
            'jean',
            function () {}
        ];

        Pre(args, null, null, { _passReqToCallback: true }, {});
        args[2]();
    });

    it('should patch and check an auth with fail', { plan: 4 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportLocalMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-fail');
                        expect(obs[0][1].keys[0][0]).to.equal('username');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, null, { req: { headers: {} , connection: {} } });
        args[1](new Error());
    });

    it('should patch and check an auth with specific name and ip', { plan: 4 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportLocalMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-fail');
                        expect(obs[0][1].keys[0][0]).to.equal('pony');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, { _usernameField: 'pony' }, { req: { headers: {}, connection: { remoteAddress: 'ip' } } });
        args[1]();
    });

    it('should patch and check an auth with specific name and ip', { plan: 5 }, (done) => {

        const Pre = Proxyquire('../../../../lib/rules/rules-callback/passportLocalMetric',
            {
                '../../metric': {
                    addObservations: function (obs) {

                        expect(obs).to.exist();
                        expect(obs[0][0]).to.equal('auto-login-success');
                        expect(obs[0][1].keys[0][0]).to.equal('username');
                        expect(obs[0][1].ip).to.equal('195.168.12.110');
                        expect(obs[0][1].keys[0][1]).to.equal('jean');
                        done();
                    }
                }
            }
        ).getCbs().pre;

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, { }, { req: { headers: { 'x-forwarded-for': '195.168.12.110' } } });
        args[1](null, {});
    });
});
