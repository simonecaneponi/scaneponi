/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Event = require('events');
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const getArguments = function () {

    return arguments;
};

describe('Callback', () => {

    describe('ContinueTracingCB', () => {

        it('should do nothing without session', { plan: 6 }, (done) => {

            expect(require('../../../../lib/rules/rules-callback').ContinueTracingCB(null).pre(null, null, null, null, null)).to.not.exist();
            expect(require('../../../../lib/rules/rules-callback').ContinueTracingCB(null).pre(null, null, null, null, {})).to.not.exist();
            expect(require('../../../../lib/rules/rules-callback').ContinueTracingCB(null).post(null, null, null, null, {})).to.not.exist();
            expect(require('../../../../lib/rules/rules-callback').ContinueTracingCB(null).post(null, {}, null, null, {})).to.not.exist();
            expect(require('../../../../lib/rules/rules-callback').ContinueTracingCB(null).post(null, new Event(), null, null, { raw: { bindEmitter: function (emitter) {

                expect(emitter instanceof Event).to.be.true();
            } } })).to.not.exist();
            done();
        });

        it('should wrap diverse callbacks without rule', { plan: 2 }, (done) => {

            const args = getArguments(() => 0, () => 1, 3);

            require('../../../../lib/rules/rules-callback').ContinueTracingCB(null).pre(args, null, null, null, {
                raw: {
                    bind: function (f) {

                        expect(f).to.exist();
                    }
                }
            });

            done();
        });

        it('should wrap diverse callbacks rule', { plan: 1 }, (done) => {

            const args = getArguments(() => 0, () => 1);

            require('../../../../lib/rules/rules-callback').ContinueTracingCB({
                data: {
                    values:
                        [{ bindRanks: [0] }]
                }
            }).pre(args, null, null, null, {
                raw: {
                    bind: function (f) {

                        expect(f).to.exist();
                    }
                }
            });

            done();
        });

        it('should wrap diverse callbacks rule', { plan: 2 }, (done) => {

            const args = getArguments(() => 0, () => 1);

            require('../../../../lib/rules/rules-callback').ContinueTracingCB({
                data: {
                    values:
                        [{ }]
                }
            }).pre(args, null, null, null, {
                raw: {
                    bind: function (f) {

                        expect(f).to.exist();
                    }
                }
            });

            done();
        });

        it('should wrap diverse callbacks rule', { plan: 2 }, (done) => {

            const args = getArguments(() => 0, () => 1);

            require('../../../../lib/rules/rules-callback').ContinueTracingCB({
                data: {
                    values:
                        []
                }
            }).pre(args, null, null, null, {
                raw: {
                    bind: function (f) {

                        expect(f).to.exist();
                    }
                }
            });

            done();
        });

        it('should wrap diverse callbacks rule', { plan: 2 }, (done) => {

            const args = getArguments(() => 0, () => 1);

            require('../../../../lib/rules/rules-callback').ContinueTracingCB({
                data: {}
            }).pre(args, null, null, null, {
                raw: {
                    bind: function (f) {

                        expect(f).to.exist();
                    }
                }
            });

            done();
        });

        it('should wrap diverse callbacks rule', { plan: 2 }, (done) => {

            const args = getArguments(() => 0, () => 1);

            require('../../../../lib/rules/rules-callback').ContinueTracingCB({}).pre(args, null, {}, null, {
                raw: {
                    bind: function (f) {

                        expect(f).to.exist();
                    }
                }
            });

            done();
        });
    });
});
