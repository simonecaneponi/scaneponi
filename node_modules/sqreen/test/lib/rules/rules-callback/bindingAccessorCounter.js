/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;


describe('BindingAccessorCounter', () => {

    it('should report it', { plan: 3 }, (done) => {

        const Pre = require('../../../../lib/rules/rules-callback').BindingAccessorCounter({
            data: {
                values: ['#.client_ip', '#.inst[\'statusCode\']', '#.sess[\'__sqreen_url\']']
            },
            metrics: [{
                name: 'http_code'
            }]
        }).pre;

        const result = Pre(null, null, null, { statusCode: 200 }, { req: { __sqreen_url: '/ponies', connection: { remoteAddress: '8.8.88.8' } } });
        expect(result.observations[0][0]).to.equal('http_code');
        expect(result.observations[0][1]).to.equal('["8.8.88.8",200,"/ponies"]');
        expect(result.observations[0][2]).to.equal(1);

        done();
    });

    it('should not report it', { plan: 1 }, (done) => {

        const Pre = require('../../../../lib/rules/rules-callback').BindingAccessorCounter({
            data: {
                values: []
            },
            metrics: [{}]
        }).pre;
        expect(Pre).to.not.exist();

        done();
    });

    it('should not report it', { plan: 1 }, (done) => {

        const Pre = require('../../../../lib/rules/rules-callback').BindingAccessorCounter({
            data: {
                values: ['#.client_ip', '#.inst[\'statusCode\']', '#.sess[\'__sqreen_url\']']
            },
            metrics: []
        }).pre;
        expect(Pre).to.not.exist();

        done();
    });
});

