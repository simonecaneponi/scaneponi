/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const HeaderInsert = require('../../../../lib/rules/rules-callback/headersInsert');

describe('HeaderInsert', () => {

    it('should test the creation of the rule', { plan: 9 }, (done) => {

        const target = [null, null, null, null, {
            res: {
                headers: {},
                setHeader: function (key, value) {

                    this.headers[key] = value;
                }
            }
        }];
        const r1 = HeaderInsert.getCbs({}).pre;
        const r2 = HeaderInsert.getCbs({ data: {} }).pre;
        const r3 = HeaderInsert.getCbs({ data: { values: [] } }).pre;
        const r4 = HeaderInsert.getCbs({ data: { values: [['aa', 'bb'], ['cc', 'dd']] } }).pre;

        r1.apply(null, target);
        expect(Object.keys(target[4].res.headers)).to.have.length(0);

        r2.apply(null, target);
        expect(Object.keys(target[4].res.headers)).to.have.length(0);

        r3.apply(null, target);
        expect(Object.keys(target[4].res.headers)).to.have.length(0);

        r4.apply(null, target);
        expect(Object.keys(target[4].res.headers)).to.have.length(2);
        expect(target[4].res.headers.aa).to.equal('bb');
        expect(target[4].res.headers.cc).to.equal('dd');

        target[4].res._headers = {};
        r4.apply(null, target);
        expect(Object.keys(target[4].res.headers)).to.have.length(2);
        expect(target[4].res.headers.aa).to.equal('bb');
        expect(target[4].res.headers.cc).to.equal('dd');


        done();
    });

    it('should test edge cases', { plan: 0 }, (done) => {

        const cb = HeaderInsert.getCbs({ data: { values: [['aa', 'bb']] } }).pre;

        cb.apply(null, [null, null, null, null, null]);
        cb.apply(null, [null, null, null, null, {}]);
        cb.apply(null, [null, null, null, null, { res: {} }]);

        done();
    });
});
