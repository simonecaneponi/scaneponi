/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const GetCB = require('../../../../lib/rules/rules-callback').ShellEnvCB;

describe('ShellEnvCB', () => {

    describe('getEnv', () => {


        const GetEnv = require('../../../../lib/rules/rules-callback/shellEnv')._getEnv;

        it('should find the env', { plan: 12 }, (done) => {

            const base = Object.keys(process.env).map((key) => process.env[key]);

            // exec
            expect(GetEnv([null, {}, () => {}])).to.equal(base); // exec(cmd, opt, cb)
            expect(GetEnv([null, { env: {} }, () => {}])).to.equal([]); // exec(cmd, opt, cb)
            expect(GetEnv([null, {}])).to.equal(base); // exec(cmd, opt)
            expect(GetEnv([null, { env: {} }])).to.equal([]); // exec(cmd, opt)
            expect(GetEnv([null])).to.equal(base); // exec(cmd)

            //execFile
            expect(GetEnv([null])).to.equal(base); // execFile(cmd)
            expect(GetEnv([null, []])).to.equal(base); // execFile(cmd, args)
            expect(GetEnv([null, [], {}])).to.equal(base); // execFile(cmd, args, opt)
            expect(GetEnv([null, [], { env: { a: 1 } }])).to.equal([1]); // execFile(cmd, args, opt)
            expect(GetEnv([null, { env: { a: 1 } }])).to.equal([1]); // execFile(cmd, opt)
            expect(GetEnv([null, [], { env: { a: 1 } }, () => {}])).to.equal([1]); // execFile(cmd, args, opt, cb)
            const fakeArgs = [];
            fakeArgs.env = { a: 1 };
            expect(GetEnv([null, fakeArgs, { env: {} }, () => {}])).to.equal([]); // execFile(cmd, arg, options, cb)

            done();
        });
    });

    it('should cover empty rule cases', { plan: 3 }, (done) => {

        expect(GetCB({ data: {} })).to.not.exist();
        expect(GetCB({})).to.not.exist();
        expect(GetCB()).to.not.exist();
        done();
    });

    it('should not detect any shellshock', { plan: 1 }, (done) => {

        const CB = GetCB({
            data: {
                values: ['vladimirSqreen']
            }
        }).pre;

        const res = CB([() => 0]);
        expect(res).to.not.exist();
        done();
    });

    it('should detect a shellshock in arguments env variable passed as argument', { plan: 2 }, (done) => {

        const CB = GetCB({
            data: {
                values: ['a']
            },
            block: true
        }).pre;

        const res = CB([() => 0, { env: { a: 10, x: 'bab' } }]);
        expect(res.record).to.exist();
        expect(res.record.found).to.equal('a');
        done();
    });

    it('should detect a shellshock in arguments env variable', { plan: 2 }, (done) => {

        const CB = GetCB({
            data: {
                values: ['vladimirSqreen']
            }
        }).pre;

        process.env.vladimirSqreen = 'vladimirSqreen';

        const res = CB([() => 0]);
        expect(res.record).to.exist();
        expect(res.record.found).to.equal('vladimirSqreen');
        delete process.env.vladimirSqreen;
        done();
    });

});
