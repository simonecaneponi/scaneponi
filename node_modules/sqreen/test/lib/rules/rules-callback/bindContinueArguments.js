/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Pre = require('../../../../lib/rules/rules-callback/bindContinueArguments').getCbs().pre;

describe('BindContinueTracingArgumentsCB', () => {

    it('should return null', { plan: 6 }, (done) => {

        expect(Pre()).to.not.exist();
        expect(Pre([], null, null, null, {})).to.not.exist();
        expect(Pre([], null, null, null, { raw: {} })).to.not.exist();
        expect(Pre([], null, null, null, { raw: { bind: {} } })).to.not.exist();
        expect(Pre([], null, null, null, { raw: { bind: {} }, req: {} })).to.not.exist();
        expect(Pre([], null, null, null, { raw: { bind: {} }, req: {}, res: {} })).to.not.exist();

        done();
    });

    it('should test', { plan: 3 }, (done) => {

        const inputs = [function () {

            return 1;
        }, 'hello', [function () {

            return 2;
        }, 'hello']];
        expect(Pre(inputs, null, null, null, { raw: { bind: {},
            runAndReturn: function (fn) {

                return fn.apply(this, arguments);
            },
            set: function () {}
        }, req: {}, res: {} })).to.not.exist();
        expect(inputs[0]()).to.equal(1);
        expect(inputs[2][0]()).to.equal(2);
        done();
    });

});
