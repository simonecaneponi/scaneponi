/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Runner = require('../../../lib/rules/runner');

describe('Runner', () => {

    describe('getExecContext', () => {

        it('should return a new context with the function inside', { plan: 3 }, (done) => {

            const execContext = Runner.getExecContext('function (x) { return x + 1; }');
            expect(execContext.ruleFct).to.exist();
            expect(execContext.ruleFct).to.be.a.function();
            expect(execContext.ruleFct(1)).to.equal(2);
            done();
        });
    });

    describe('exec', () => {

        it('should execute the function with the provided parameters', { plan: 3 }, (done) => {

            const execContext = Runner.getExecContext('function (x) { return x + 1; }');
            const result = Runner.exec(execContext, [7]);
            expect(result).to.equal(8);
            expect(execContext.params).to.equal([7]);
            expect(execContext.result).to.equal(8);

            done();
        });

        it('should prove that exec is isolated', { plan: 3 }, (done) => {

            const y = 1;
            const execContext = Runner.getExecContext('function () { y++; }');
            try {
                Runner.exec(execContext, []);
                done(new Error('should have failed'));
            }
            catch (err) {
                expect(err).to.exist();
                expect(err.message).to.equal('y is not defined');
                expect(y).to.equal(1);
                done();
            }
        });

    });
});
