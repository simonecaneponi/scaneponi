/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const beforeEach = lab.beforeEach;
const afterEach = lab.afterEach;
const expect = Code.expect;

const Fs = require('fs');
const Path = require('path');

const Rimraf = require('rimraf');

const Config = require('../../../lib/config');

describe('Config', () => {

    describe('parseConfig', () => {

        it('should not change anything to a good conf', { plan: 10 }, (done) => {

            const orig = {
                url: 'http://back2.sqreen.io',
                token: 'dsffdsdf',
                local_rules: 'path/to/file',
                rules_verify_signature: true,
                log_level: 'DEBUGG',
                log_location: 'sqreen.logs',
                run_in_test: true,
                block_all_rules: false,
                report_perf_newrelic: false,
                initial_features: 'path/to/file'
            };

            const config = Config.parseConfig(orig);

            expect(config.url).to.equal(orig.url);
            expect(config.token).to.equal(orig.token);
            expect(config.local_rules).to.equal(orig.local_rules);
            expect(config.rules_verify_signature).to.equal(orig.rules_verify_signature);
            expect(config.log_level).to.equal('WARN');
            expect(config.log_location).to.equal(orig.log_location);
            expect(config.run_in_test).to.equal(orig.run_in_test);
            expect(config.block_all_rules).to.equal(orig.block_all_rules);
            expect(config.report_perf_newrelic).to.equal(orig.report_perf_newrelic);
            expect(config.initial_features).to.equal(orig.initial_features);

            done();
        });

        it('should accept an empty conf with only token', { plan: 10 }, (done) => {

            const defaultConf = {
                url: 'https://back.sqreen.io',
                token: 'token',
                rules_verify_signature: true,
                log_level: 'WARN',
                log_location: '',
                run_in_test: false,
                block_all_rules: false,
                report_perf_newrelic: false
            };

            const config = Config.parseConfig({ token: 'token' });

            expect(config).to.exist();
            expect(config.url).to.equal(defaultConf.url);
            expect(config.token).to.equal(defaultConf.token);
            expect(config.local_rules).to.not.exist();
            expect(config.rules_verify_signature).to.equal(defaultConf.rules_verify_signature);
            expect(config.log_level).to.equal(defaultConf.log_level);
            expect(config.log_location).to.equal(defaultConf.log_location);
            expect(config.run_in_test).to.equal(defaultConf.run_in_test);
            expect(config.block_all_rules).to.equal(defaultConf.block_all_rules);
            expect(config.report_perf_newrelic).to.equal(defaultConf.report_perf_newrelic);

            done();
        });

        it('should refuse malformed conf', { plan: 1 }, (done) => {

            const orig = {
                log_level: 'XYZ'
            };

            const result = Config.parseConfig(orig);

            expect(result).to.not.exist();

            done();
        });

        it('should accept boolean as strings', { plan: 5 }, (done) => {

            const orig = {
                token: 'token',
                rules_verify_signature: 'false',
                run_in_test: 'true',
                block_all_rules: 'false',
                report_perf_newrelic: 'true'
            };

            const config = Config.parseConfig(orig);

            const convert = (str) => str === 'true';

            expect(config).to.exist();
            expect(config.rules_verify_signature).to.equal(convert(orig.rules_verify_signature));
            expect(config.run_in_test).to.equal(convert(orig.run_in_test));
            expect(config.block_all_rules).to.equal(convert(orig.block_all_rules));
            expect(config.report_perf_newrelic).to.equal(convert(orig.report_perf_newrelic));

            done();
        });
    });

    describe('readConfig', () => {

        const originalBase = process.cwd();
        const targetTmpBase = Path.join(originalBase, 'tmp');
        beforeEach((done) => {

            Rimraf(targetTmpBase, () => {

                Fs.mkdirSync(targetTmpBase);
                process.chdir(targetTmpBase);
                done();
            });
        });

        afterEach((done) => {

            process.chdir(originalBase);
            Rimraf(targetTmpBase, done);
        });

        it('should read the conf from a json file', { plan: 1 }, (done) => {

            const toWrite = { url: 'http://back2.sqreen.io' };

            Fs.writeFileSync(Path.join(process.cwd(), 'sqreen.json'), JSON.stringify(toWrite));

            const read = Config.readConfig();

            expect(read.url).to.equal(toWrite.url);

            done();
        });


        it('should not read the conf from a malformed json file', { plan: 1 }, (done) => {

            Fs.writeFileSync(Path.join(process.cwd(), 'sqreen.json'), '{');

            const read = Config.readConfig();

            expect(read).to.equal({});

            done();
        });

        it('should read the conf from another file defined in env', { plan: 1 }, (done) => {

            Fs.writeFileSync(Path.join(process.cwd(), 'conf_sqreen.json'), '{ "token": "token" }');

            process.env.SQREEN_CONFIG_FILE = Path.join(process.cwd(), 'conf_sqreen.json');
            const read = Config.readConfig();

            expect(read).to.equal({ token: 'token' });

            delete process.env.SQREEN_CONFIG_FILE;

            done();
        });

        it('should read the conf from a json file and env variables', { plan: 3 }, (done) => {

            const toWrite = { url: 'http://back2.sqreen.io', token: 'token', disable: true };

            process.env.SQREEN_URL = 'http://back2.sqreen.io';

            Fs.writeFileSync(Path.join(process.cwd(), 'sqreen.json'), JSON.stringify(toWrite));

            const read = Config.readConfig();

            expect(read.url).to.equal('http://back2.sqreen.io');
            expect(read.token).to.equal(toWrite.token);
            expect(read.run_in_test).to.equal(true);

            delete process.env.SQREEN_URL;

            done();
        });

        it('should read the conf from env variables', { plan: 10 }, (done) => {

            process.env.SQREEN_URL = 'http://back2.sqreen.io';
            process.env.SQREEN_TOKEN = 'token';
            process.env.SQREEN_RULES = 'path/to/file';
            process.env.SQREEN_RULES_SIGNATURE = 'false';
            process.env.SQREEN_LOG_LEVEL = 'DEBUG';
            process.env.SQREEN_LOG_LOCATION = 'sq.logs';
            process.env.SQREEN_RUN_IN_TEST = '1';
            process.env.SQREEN_BLOCK_ALL_RULES = 'false';
            process.env.SQREEN_REPORT_PERF_NR = 'true';
            process.env.SQREEN_INITIAL_FEATURES = './file.json';


            const read = Config.readConfig();

            expect(read.url).to.equal('http://back2.sqreen.io');
            expect(read.token).to.equal('token');
            expect(read.local_rules).to.equal('path/to/file');
            expect(read.rules_verify_signature).to.equal(false);
            expect(read.log_level).to.equal('DEBUG');
            expect(read.log_location).to.equal('sq.logs');
            expect(read.run_in_test).to.equal(true);
            expect(read.block_all_rules).to.equal(false);
            expect(read.report_perf_newrelic).to.equal(true);
            expect(read.initial_features).to.equal('./file.json');

            delete process.env.SQREEN_URL;
            delete process.env.SQREEN_TOKEN;
            delete process.env.SQREEN_RULES;
            delete process.env.SQREEN_RULES_SIGNATURE;
            delete process.env.SQREEN_LOG_LEVEL;
            delete process.env.SQREEN_LOG_LOCATION;
            delete process.env.SQREEN_RUN_IN_TEST;
            delete process.env.SQREEN_BLOCK_ALL_RULES;
            delete process.env.SQREEN_REPORT_PERF_NR;
            delete process.env.SQREEN_INITIAL_FEATURES;

            done();
        });

        it('should read the conf from env variables but cannot parse rules list', { plan: 8 }, (done) => {

            process.env.SQREEN_URL = 'http://back2.sqreen.io';
            process.env.SQREEN_TOKEN = 'token';
            process.env.SQREEN_RULES_SIGNATURE = 'false';
            process.env.SQREEN_LOG_LEVEL = 'DEBUG';
            process.env.SQREEN_LOG_LOCATION = 'sq.logs';
            process.env.SQREEN_RUN_IN_TEST = 'true';
            process.env.SQREEN_BLOCK_ALL_RULES = 'false';
            process.env.SQREEN_REPORT_PERF_NR = 'true';


            const read = Config.readConfig();

            expect(read.url).to.equal('http://back2.sqreen.io');
            expect(read.token).to.equal('token');
            expect(read.rules_verify_signature).to.equal(false);
            expect(read.log_level).to.equal('DEBUG');
            expect(read.log_location).to.equal('sq.logs');
            expect(read.run_in_test).to.equal(true);
            expect(read.block_all_rules).to.equal(false);
            expect(read.report_perf_newrelic).to.equal(true);

            delete process.env.SQREEN_URL;
            delete process.env.SQREEN_TOKEN;
            delete process.env.SQREEN_RULES;
            delete process.env.SQREEN_RULES_SIGNATURE;
            delete process.env.SQREEN_LOG_LEVEL;
            delete process.env.SQREEN_LOG_LOCATION;
            delete process.env.SQREEN_RUN_IN_TEST;
            delete process.env.SQREEN_BLOCK_ALL_RULES;
            delete process.env.SQREEN_REPORT_PERF_NR;

            done();
        });

        it('should read the conf from env variables but cannot parse rules list', { plan: 8 }, (done) => {

            process.env.SQREEN_URL = 'http://back2.sqreen.io';
            process.env.SQREEN_TOKEN = 'token';
            process.env.SQREEN_RULES_SIGNATURE = 'false';
            process.env.SQREEN_LOG_LEVEL = 'DEBUG';
            process.env.SQREEN_LOG_LOCATION = 'sq.logs';
            process.env.SQREEN_BLOCK_ALL_RULES = 'false';
            process.env.SQREEN_REPORT_PERF_NR = 'true';
            process.env.SQREEN_DISABLE = 'true';


            const read = Config.readConfig();

            expect(read.url).to.equal('http://back2.sqreen.io');
            expect(read.token).to.equal('token');
            expect(read.rules_verify_signature).to.equal(false);
            expect(read.log_level).to.equal('DEBUG');
            expect(read.log_location).to.equal('sq.logs');
            expect(read.run_in_test).to.equal(true);
            expect(read.block_all_rules).to.equal(false);
            expect(read.report_perf_newrelic).to.equal(true);

            delete process.env.SQREEN_URL;
            delete process.env.SQREEN_TOKEN;
            delete process.env.SQREEN_RULES;
            delete process.env.SQREEN_RULES_SIGNATURE;
            delete process.env.SQREEN_LOG_LEVEL;
            delete process.env.SQREEN_LOG_LOCATION;
            delete process.env.SQREEN_DISABLE;
            delete process.env.SQREEN_BLOCK_ALL_RULES;
            delete process.env.SQREEN_REPORT_PERF_NR;

            done();
        });

    });

    describe('getConfig', () => {

        const originalBase = process.cwd();
        const targetTmpBase = Path.join(originalBase, 'tmp');
        beforeEach((done) => {

            Rimraf(targetTmpBase, () => {

                Fs.mkdirSync(targetTmpBase);
                process.chdir(targetTmpBase);
                done();
            });
        });

        afterEach((done) => {

            process.chdir(originalBase);
            Rimraf(targetTmpBase, done);
        });

        it('should read the conf from a json file and en var then parse it', { plan: 12 }, (done) => {

            const toWrite = {
                url: 'http://back2.sqreen.io',
                local_rules: 'path/to/file',
                rules_verify_signature: true,
                log_level: 'UNKNOWN',
                log_location: 'sqreen.logs',
                run_in_test: true,
                block_all_rules: false,
                report_perf_newrelic: false
            };

            process.env.SQREEN_TOKEN = 'token';
            Fs.writeFileSync(Path.join(process.cwd(), 'sqreen.json'), JSON.stringify(toWrite));

            const config = Config.getConfig(true);

            const goal = Object.assign(toWrite, { token: 'token' });

            expect(config).to.exist();
            expect(config.url).to.equal(goal.url);
            expect(config.token).to.equal(goal.token);
            expect(config.local_rules).to.equal(goal.local_rules);
            expect(config.rules_verify_signature).to.equal(goal.rules_verify_signature);
            expect(config.log_level).to.equal(goal.log_level);
            expect(config.log_location).to.equal(goal.log_location);
            expect(config.run_in_test).to.equal(goal.run_in_test);
            expect(config.block_all_rules).to.equal(goal.block_all_rules);
            expect(config.report_perf_newrelic).to.equal(goal.report_perf_newrelic);

            process.env.SQREEN_TOKEN = 'token2';
            const config2 = Config.getConfig();
            expect(config2.token).to.equal('token');

            const config3 = Config.getConfig(true);
            expect(config3.token).to.equal('token2');


            done();
        });
    });
});


