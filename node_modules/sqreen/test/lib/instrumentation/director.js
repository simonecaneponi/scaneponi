/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const beforeEach = lab.beforeEach;
const expect = Code.expect;

const Director = require('../../../lib/instrumentation/sqreenDirector');

describe('Director', () => {

    beforeEach((done) => {

        Director._init();
        done();
    });

    describe('register', () => {

        it('should register a new script for instrumentation', { plan: 10 }, (done) => {

            expect(Director.isInstrumented('moduleName')).to.be.false();

            const fct = function () {};
            Director.register({ moduleName: 'moduleName', file: 'lib/index.js', methodName: 'methodName', version:'1.0.0', updateCallback: fct });

            const instrumented = Director._getInstrumented();
            expect(instrumented).to.exist();
            expect(instrumented.moduleName).to.exist();
            expect(instrumented.moduleName['1.0.0']).to.exist();
            expect(instrumented.moduleName['1.0.0']['lib/index.js']).to.exist();
            expect(instrumented.moduleName['1.0.0']['lib/index.js'].methodName).to.exist();
            expect(instrumented.moduleName['1.0.0']['lib/index.js'].methodName).to.be.an.array();
            expect(instrumented.moduleName['1.0.0']['lib/index.js'].methodName).to.have.length(1);
            expect(instrumented.moduleName['1.0.0']['lib/index.js'].methodName[0]).to.equal(fct);

            expect(Director.isInstrumented('moduleName')).to.be.true();

            done();
        });

        it('should register a new script for instrumentation event without method name', { plan: 9 }, (done) => {

            const fct = function () {};
            Director.register({ moduleName: 'moduleName', file: 'lib/index.js', updateCallback: fct });

            const instrumented = Director._getInstrumented();
            expect(instrumented).to.exist();
            expect(instrumented.moduleName).to.exist();
            expect(instrumented.moduleName['']).to.exist();
            expect(instrumented.moduleName['']['lib/index.js']).to.exist();
            expect(instrumented.moduleName['']['lib/index.js']['']).to.exist();
            expect(instrumented.moduleName['']['lib/index.js']['']).to.exist();
            expect(instrumented.moduleName['']['lib/index.js']['']).to.be.an.array();
            expect(instrumented.moduleName['']['lib/index.js']['']).to.have.length(1);
            expect(instrumented.moduleName['']['lib/index.js'][''][0]).to.equal(fct);

            done();
        });

        it('should register a new script for instrumentation twice', { plan: 9 }, (done) => {

            const fct1 = function () {};
            const fct2 = function () {};
            Director.register({ moduleName: 'moduleName', methodName: 'methodName', version:'1.0.0', updateCallback: fct1 });
            Director.register({ moduleName: 'moduleName', methodName: 'methodName', version:'1.0.0', updateCallback: fct2 });

            const instrumented = Director._getInstrumented();
            expect(instrumented).to.exist();
            expect(instrumented.moduleName).to.exist();
            expect(instrumented.moduleName['1.0.0']).to.exist();
            expect(instrumented.moduleName['1.0.0']['']).to.exist();
            expect(instrumented.moduleName['1.0.0'][''].methodName).to.exist();
            expect(instrumented.moduleName['1.0.0'][''].methodName).to.be.an.array();
            expect(instrumented.moduleName['1.0.0'][''].methodName).to.have.length(2);
            expect(instrumented.moduleName['1.0.0'][''].methodName[0]).to.equal(fct1);
            expect(instrumented.moduleName['1.0.0'][''].methodName[1]).to.equal(fct2);

            done();
        });

    });

    describe('update', () => {

        it('should actionnate a registered script', { plan: 2 }, (done) => {

            const caller = { moduleName: 'moduleName', file: 'index.js', methodName: 'methodName', versions: '', build: () => {}, params: 'hello' };
            const fct = function (params) {

                expect(params).to.equal(caller.params);
            };
            Director.register({ moduleName: 'moduleName', file:'index.js', methodName: 'methodName', version:'', updateCallback: fct });
            expect(Director.update(caller)).to.equal(['']);
            done();
        });

        it('should actionnate a registered script', { plan: 2 }, (done) => {

            const caller = { moduleName: 'moduleName', file: 'index.js', methodName: 'methodName', versions: '', params: 'hello' };
            const fct = function (params) {

                expect(params).to.equal(caller.params);
            };
            Director.register({ moduleName: 'moduleName', file:'index.js', methodName: 'methodName', version:'', updateCallback: fct });
            expect(Director.update(caller)).to.equal(['']);
            done();
        });

        it('should not call if the version is wrong', { plan: 1 }, (done) => {

            const caller = { moduleName: 'moduleName', methodName: 'methodName', versions: '> 2.0.0', params: 'hello' };
            const fct = function () {};
            Director.register({ moduleName: 'moduleName', methodName: 'methodName', version:'1.0.0', build: () => {}, updateCallback: fct });
            const res = Director.update(caller);
            expect(res).to.equal(false);
            done();
        });

        it('should not call if the module is not instrumented', { plan: 1 }, (done) => {

            const caller = { moduleName: 'moduleName', methodName: 'methodName', versions: '> 2.0.0', params: 'hello' };
            const res = Director.update(caller);
            expect(res).to.equal(false);
            done();
        });

        it('should actionnate an unnamed registered script', { plan: 2 }, (done) => {

            const caller = { moduleName: 'moduleName', params: 'hello', build: () => {} };
            const fct = function (params) {

                expect(params).to.equal(caller.params);
            };
            Director.register({ moduleName: 'moduleName', updateCallback: fct });
            expect(Director.update(caller)).to.equal(['']);
            done();
        });

        it('should not run inexistent file', { plan: 1 }, (done) => {

            const caller = { moduleName: 'moduleName', versions: '5.1.0', file: 'index.js', params: 'hello' };
            const fct = function () {

                done(new Error('should not have been called'));
            };
            Director.register({ moduleName: 'moduleName', version: '5.1.0', file: 'lib/secret.js', updateCallback: fct });
            expect(Director.update(caller)).to.equal(['5.1.0']);
            done();
        });

        it('should not call a non existing script', { plan: 1 }, (done) => {

            const caller = { moduleName: 'moduleName', methodName: 'methodName', versions: '1.0.0', params: 'hello' };
            const fct = function () {

                done(new Error('should not have been called'));
            };
            Director.register({ moduleName: 'moduleName', methodName: 'methodName_fake', version:'1.0.0', updateCallback: fct });
            expect(Director.update(caller)).to.equal(['1.0.0']);
            done();
        });

        it('should actionnate a registered script after passing in the waiting list', { plan: 2 }, (done) => {

            const caller = { moduleName: 'moduleName_unique', file: 'index.js', methodName: 'methodName', versions: '', build: () => {}, params: 'hello' };
            const fct = function (params) {

                expect(params).to.equal(caller.params);
            };
            try {
                Director.update(caller);
                Director.update(caller);
            }
            catch (err) {
                expect(err).to.exist();
            }
            Director.register({ moduleName: 'moduleName_unique', file:'index.js', methodName: 'methodName', version:'', updateCallback: fct });
            done();
        });
    });

    describe('_stopWaiting', () => {

        it('should try to go through an empty list', { plan: 0 }, (done) => {

            Director._stopWaiting('poney');
            done();
        });
    });

    describe('_addToWaiting', () => {

        it('should try to create new waiting claim', { plan: 0 }, (done) => {

            Director._addToWaiting('poney');
            Director._addToWaiting('poney');
            done();
        });

        it('should try to create new waiting claim and stop it on a point that does not exist', { plan: 0 }, (done) => {

            Director._addToWaiting({ moduleName: 'xxx' });
            Director._stopWaiting('xxx');
            done();
        });
    });
});

