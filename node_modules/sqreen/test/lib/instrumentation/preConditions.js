/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const PreCondition = require('../../../lib/instrumentation/preConditions');

describe('preConditions', () => {

    it('should have early aborts', { plan: 5 }, (done) => {

        expect(PreCondition.fillsPreConditions()).to.be.true();
        expect(PreCondition.fillsPreConditions({})).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions : {} })).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions : { pre: {} } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions : { pre: { 'pony': {} } } }, 'pre')).to.be.false();
        done();
    });

    it('should resolve a dummy condition', { plan: 6 }, (done) => {

        expect(PreCondition.fillsPreConditions({ conditions: { pre: {} } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { failing: { '%and': ['0', '1'], useless: [] } } }, 'fail')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%and': ['1', '1'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%or': ['0', '1'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%or': ['0', '0'] } } }, 'pre')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%or': ['1', '0'] } } }, 'pre')).to.be.true();
        done();
    });

    it('should resolve a complex condition', { plan: 2 }, (done) => {

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%and': ['1', { '%or': ['1', '1'] }] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%and': ['1', { '%and': ['1', '0'] }] } } }, 'pre')).to.be.false();
        done();
    });

    it('should test the basic operators', { plan: 16 }, (done) => {

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%equals': ['0', '1'] } } }, 'pre')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%equals': ['1', '1'] } } }, 'pre')).to.be.true();

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%not_equals': ['0', '1'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%not_equals': ['1', '1'] } } }, 'pre')).to.be.false();

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%gt': ['0', '1'] } } }, 'pre')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%gt': ['1', '0'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%gt': ['1', '1'] } } }, 'pre')).to.be.false();

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%gte': ['0', '1'] } } }, 'pre')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%gte': ['1', '0'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%gte': ['1', '1'] } } }, 'pre')).to.be.true();

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%lt': ['0', '1'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%lt': ['1', '0'] } } }, 'pre')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%lt': ['1', '1'] } } }, 'pre')).to.be.false();

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%lte': ['0', '1'] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%lte': ['1', '0'] } } }, 'pre')).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%lte': ['1', '1'] } } }, 'pre')).to.be.true();

        done();
    });

    it('should try the inclusion operator', { plan: 6 }, (done) => {

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%include': ['#.args[0]', '\'a\''] } } }, 'pre', [['a', 'b']])).to.be.true();
        expect(PreCondition.fillsPreConditions({ data: ['a', 'b'],  conditions: { pre: { '%include': ['#.data', '\'a\''] } } }, 'pre')).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%include': ['#.args[0]', '0'] } } }, 'pre', [['a', 'b']])).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%include': ['#.args[0]', 10] } } }, 'pre', [['a', 'b']])).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%include': ['#.args[0]', '0'] } } }, 'pre', [{}])).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%include': ['#.args[0]', '0'] } } }, 'pre', {})).to.be.false();
        done();
    });

    it('should try the hash_val_include operator', { plan: 5 }, (done) => {

        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%hash_val_include': ['\'hello malicious world\'', '#.args', '3'] } } }, 'pre', [['a', 'b'], 'unicorn', { stuff: 'malicious' }])).to.be.true();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%hash_val_include': ['\'hello malicious world\'', '#.args', '10'] } } }, 'pre', [['a', 'b'], 'malicious'])).to.be.false();
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%hash_val_include': ['\'hello malicious world\'', '#.args', '10'] } } }, 'pre', [['a', 'b'], 'malicious'])).to.be.false();

        expect(PreCondition._hashValIncludes('')).to.be.true();

        const args = { y: 10 };
        args.x = args;
        expect(PreCondition.fillsPreConditions({ conditions: { pre: { '%hash_val_include': ['\'hello malicious world\'', '#.args', '10'] } } }, 'pre', args)).to.be.false();
        done();
    });

    it('should end the coverage', { plan: 1 }, (done) => {

        expect(PreCondition._evalPreCond({})).to.be.false();
        done();
    });
});
