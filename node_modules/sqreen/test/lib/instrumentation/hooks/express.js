/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Hook = '../../../../lib/instrumentation/hooks/expressHook';
const Proxyquire = require('proxyquire');

const isBound = function (fn) {

    return fn.toString().indexOf('self.enter(context);') > 0 || fn.toString().indexOf('err[\'error@context\'] = undefined;') > 0;
};

describe('Hook Express', () => {

    it('should do nothing since layer is absent', { plan: 0 }, (done) => {

        const EHook = Proxyquire(Hook, {
            '../patcher': {
                savedModules: {}
            }
        });

        EHook();
        done();
    });

    it('should place the bind if possible', { plan: 1 }, (done) => {

        const arr = [
            {},
            {
                module: {}
            },
            {
                module: {
                    prototype: {}
                }
            },
            {
                module: {
                    prototype: {
                        handle_request: function (req, res, next) {

                            expect(isBound(next)).to.be.true();
                            next();
                        }
                    }
                }
            }
        ];
        const EHook = Proxyquire(Hook, {
            '../patcher': {
                savedModules: {
                    'express:lib/router/layer.js': arr
                }
            }
        });
        EHook({}, {
            application: {
                use: function () {

                }
            }
        });

        arr[3].module.prototype.handle_request({}, {}, () => {

            done();
        });
    });

    it('should place the bind if possible', { plan: 1 }, (done) => {

        const arr = [
            {},
            {
                module: {}
            },
            {
                module: {
                    prototype: {}
                }
            },
            {
                module: {
                    prototype: {
                        handle_request: function (req, res, next) {

                            next();
                        }
                    }
                }
            }
        ];
        const EHook = Proxyquire(Hook, {
            '../patcher': {
                savedModules: {
                    'express:lib/router/layer.js': arr
                }
            },
            './util': {
                getNS: function () {

                    return {
                        get: function () {

                            return true;
                        },
                        bind: function (f) {

                            expect(true).to.be.true();
                            return f;
                        }
                    };
                }
            }
        });
        EHook({}, {
            application: {
                use: function () {

                }
            }
        });

        arr[3].module.prototype.handle_request({}, {}, () => {

            done();
        });
    });

    it('should place the bind if possible and place the secret middleware', { plan: 5 }, (done) => {

        const arr = [
            {},
            {
                module: {}
            },
            {
                module: {
                    prototype: {}
                }
            },
            {
                module: {
                    prototype: {
                        handle_request: function (req, res, next) {

                            next();
                        }
                    }
                }
            }
        ];
        const EHook = Proxyquire(Hook, {
            '../patcher': {
                savedModules: {
                    'express:lib/router/layer.js': arr
                }
            },
            './util': {
                getNS: function () {

                    return {
                        get: function () {

                            return true;
                        },
                        bind: function (f) {

                            expect(true).to.be.true();
                            return f;
                        }
                    };
                }
            }
        });

        const app = {
            middle: [],
            _router: {
                use: function (arg) {

                    app.middle.push(arg);
                }
            } };
        const module = {
            application: {
                use: function (arg) {

                    this.middle.push(arg);
                },
                lazyrouter: function () {}
            }
        };
        EHook({}, module);

        arr[3].module.prototype.handle_request({}, {}, () => {

            module.application.lazyrouter.apply(app);
            module.application.lazyrouter.apply(app);
            module.application.use.apply(app, ['/']);
            module.application.use.apply(app, ['/b']);

            expect(app.middle).to.have.length(3);
            expect(app.hasSqreenMiddleware).to.be.true();
            expect(app.middle[0]).to.be.a.function();
            expect(app.middle[1]).to.equal('/');
            done();
        });
    });

    it('should place the bind if possible and place the secret middleware', { plan: 8 }, (done) => {

        const arr = [
            {},
            {
                module: {}
            },
            {
                module: {
                    prototype: {}
                }
            },
            {
                module: {
                    prototype: {
                        handle_request: function (req, res, next) {

                            next();
                        }
                    }
                }
            }
        ];
        const EHook = Proxyquire(Hook, {
            '../patcher': {
                savedModules: {
                    'express:lib/router/layer.js': arr
                }
            },
            './util': {
                getNS: function () {

                    return {
                        get: function () {

                            return true;
                        },
                        bind: function (f) {

                            expect(true).to.be.true();
                            return f;
                        }
                    };
                },
                hasCookieParser: function () {

                    return true;
                }
            }
        });

        const app = { middle: [] };
        const module = {
            application: {
                use: function (arg) {

                    this.middle.push(arg);
                }
            }
        };
        EHook({}, module);

        arr[3].module.prototype.handle_request({}, {}, () => {

            module.application.use.apply(app, ['/']);
            module.application.use.apply(app, ['/b']);

            expect(app.middle).to.have.length(2);
            expect(app.middle[0]).to.equal('/');
            expect(app.middle[1]).to.equal('/b');

            const cookieParser = function cookieParser() {};
            module.application.use.apply(app, [cookieParser]);

            expect(app.middle).to.have.length(4);

            expect(app.middle[2]).to.equal(cookieParser);
            expect(app.middle[3]).to.be.a.function();


            module.application.use.apply(app, ['/b']);
            expect(app.middle).to.have.length(5);

            app.middle[3](1,2, () => {

                done();
            });
        });
    });
});
