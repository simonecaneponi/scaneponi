/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');


describe('Hook', () => {

    describe('body-parser', () => {

        it('should make the closures instrumented', { plan: 4 }, (done) => {

            let ctr = 0;
            const METHODS = ['json', 'raw', 'text', 'urlencoded'];
            const MockedHook = Proxyquire('../../../../lib/instrumentation/hooks/bodyParserHook', {
                '../sqreenDirector': {
                    update: function (payload) {

                        if (payload.methodName.indexOf('closured') === -1) {
                            expect(payload.methodName).to.equal(METHODS[ctr]);

                            if (ctr === METHODS.length - 1) {
                                done();
                            }
                        }
                        ctr++;
                    }
                },
                '../functionPatcher': {
                    patchFunction: function () {}
                }
            });
            MockedHook({ version: '0.1.0' });
        });

        it('should make the closures instrumented', { plan: 4 }, (done) => {

            let ctr = 0;
            const METHODS = ['json', 'raw', 'text', 'urlencoded'];
            const MockedHook = Proxyquire('../../../../lib/instrumentation/hooks/bodyParserHook', {
                '../sqreenDirector': {
                    update: function (payload) {

                        if (payload.methodName.indexOf('closured') === -1) {
                            expect(payload.methodName).to.equal(METHODS[ctr]);
                        }
                        if (ctr === METHODS.length - 1) {
                            done();
                        }
                        else {
                            ctr++;
                            throw new Error();
                        }
                    }
                },
                '../functionPatcher': {
                    patchFunction: function () {}
                }
            });

            MockedHook({ version: '0.1.0' });
        });
    });

    describe('_patchMiddleware', () => {

        it('run the diverse methods', { plan: 3 }, (done) => {

            const MockedHook = Proxyquire('../../../../lib/instrumentation/hooks/bodyParserHook', {
                '../sqreenDirector': {
                    update: function (payload) {

                        const method = payload.params.postCbs[0].method;
                        const pl = method(null, (req, res, next) => {

                            expect(req).to.equal('req');
                            expect(res).to.equal('res');
                            next();
                        });

                        pl.newReturnValue('req', 'res', (err) => {

                            expect(err).to.not.exist();
                            done();
                        });
                    }
                },
                '../functionPatcher': {
                    patchFunction: function () {}
                }
            });
            MockedHook._patchMiddleware({ version: '0.1.0' }, 'json:');
        });

        it('run the diverse methods', { plan: 3 }, (done) => {

            const MockedHook = Proxyquire('../../../../lib/instrumentation/hooks/bodyParserHook', {
                '../sqreenDirector': {
                    update: function (payload) {

                        const method = payload.params.postCbs[0].method;
                        const pl = method(null, (req, res, next) => {

                            expect(req).to.equal('req');
                            expect(res).to.equal('res');
                            next('err');
                        });

                        pl.newReturnValue('req', 'res', (err) => {

                            expect(err).to.exist();
                            done();
                        });
                    }
                },
                '../functionPatcher': {
                    patchFunction: function () {}
                }
            });
            MockedHook._patchMiddleware({ version: '0.1.0' }, 'json:');
        });

        it('run the diverse methods', { plan: 3 }, (done) => {

            const MockedHook = Proxyquire('../../../../lib/instrumentation/hooks/bodyParserHook', {
                '../sqreenDirector': {
                    update: function (payload) {

                        const method = payload.params.postCbs[0].method;
                        const pl = method(null, (req, res, next) => {

                            expect(req).to.equal('req');
                            expect(res).to.equal('res');
                            next('err');
                        });

                        pl.newReturnValue('req', 'res', (err) => {

                            expect(err).to.exist();
                            done();
                        });
                    }
                },
                '../functionPatcher': {
                    patchFunction: function () {}
                }
            });
            MockedHook._patchMiddleware({ version: '0.1.0' }, 'json:');
        });
    });
});
