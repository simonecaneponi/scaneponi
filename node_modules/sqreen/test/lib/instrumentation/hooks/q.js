/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Hook = require('../../../../lib/instrumentation/hooks/qHook');

const isBound = function (fn) {

    return fn.toString().indexOf('self.enter(context);') > 0 || fn.toString().indexOf('err[\'error@context\'] = undefined;') > 0;
};

describe('Hook Q', () => {

    it('should place binds where needed', { plan: 11 }, (done) => {

        expect(Hook(null, null)).to.be.false();
        expect(Hook(null, {})).to.be.false();
        expect(Hook(null, { makePromise: {} })).to.be.false();
        expect(Hook(null, { makePromise: { prototype: {} } })).to.be.true();

        let i = 0;
        const module = {
            makePromise: {
                prototype: {
                    then: function (res, rej, prog) {

                        if (i === 0) {
                            expect(isBound(res)).to.be.true();
                            expect(isBound(rej)).to.be.true();
                            expect(isBound(prog)).to.be.true();
                            i++;
                        }
                        else {
                            expect(res).to.not.exist();
                            expect(rej).to.not.exist();
                            expect(prog).to.not.exist();
                            done();
                        }

                    }
                }
            }
        };
        expect(Hook(null, module)).to.be.true();
        module.makePromise.prototype.then(() => {}, () => {}, () => {});
        module.makePromise.prototype.then();


    });
});
