/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;
const before = lab.before;
const after = lab.after;

const ModuleIdentity = require('../../../lib/instrumentation/moduleIdentity');

const Module = require('module');
//const Semver = require('semver');
const Proxyquire = require('proxyquire');
//const Pkg = require('../../../package.json');

describe('ModuleIdentity', () => {

    describe('_buildModuleData', () => {

        [
            {
                test: 'a simple module',
                input: '~/node_modules/boom/lib/index.js',
                output: {
                    name: 'boom',
                    baseDir: '~/node_modules/boom',
                    relativePath: 'lib/index.js' }
            },
            {
                test: 'a scoped module',
                input: '~/project/node_modules/@sqreen/secret_module/node_modules/@sqreen/sqreen/index.js',
                output: {
                    name: '@sqreen/sqreen',
                    baseDir: '~/project/node_modules/@sqreen/secret_module/node_modules/@sqreen/sqreen',
                    relativePath: 'index.js' }
            }
        ]
            .forEach((test) => {

                it(`should read the identity of ${test.test}`, { plan: 5 }, (done) => {

                    const result = ModuleIdentity._buildModuleData(test.input);

                    expect(result).to.exist();
                    expect(result).to.includes(['name', 'baseDir', 'relativePath']);
                    expect(result.name).to.equal(test.output.name);
                    expect(result.baseDir).to.equal(test.output.baseDir);
                    expect(result.relativePath).to.equal(test.output.relativePath);
                    done();

                });
            });
    });

    describe('scan', () => {

        let load;
        before((done) => {

            load = Module._load;
            done();
        });

        after((done) => {

            Module._load = load;
            done();
        });

        it('should scan a core module', { plan: 4 }, (done) => {

            let info;
            Module._load = function (request, parent) {


                info = ModuleIdentity.scan(request, parent);
                return load.apply(this, arguments);
            };

            require('http');
            expect(info).to.exist();
            expect(info.internal).to.be.false();
            expect(info.core).to.be.true();
            expect(info.name).to.equal('http');
            done();
        });

        it('should scan a dependency module', { plan: 5 }, (done) => {

            let info;
            Module._load = function (request, parent) {

                if (request === 'lab') {
                    info = ModuleIdentity.scan(request, parent);
                }
                return load.apply(this, arguments);
            };

            require('lab');
            expect(info).to.exist();
            expect(info.core).to.be.false();
            expect(info.name).to.equal('lab');
            expect(info.declaredName).to.equal('lab');
            expect(info.relativePath).to.equal('lib/index.js');
            //expect(Semver.satisfies(info.version, Pkg.devDependencies.lab)).to.be.true();
            done();
        });

        it('should scan a dependency module but fail at loading package.json', { plan: 3 }, (done) => {

            const MockedModuleIdentity = Proxyquire('../../../lib/instrumentation/moduleIdentity', {
                fs: {
                    readFileSync: function () {

                        return '{';
                    }
                }
            });
            let info;
            Module._load = function (request, parent) {

                if (request === 'lab') {
                    info = MockedModuleIdentity.scan(request, parent);
                }
                return load.apply(this, arguments);
            };

            require('lab');
            expect(info).to.exist();
            expect(info.core).to.be.false();
            expect(info.name).to.equal('lab');
            done();
        });

        it('should scan an internal module', { plan: 4 }, (done) => {

            let info;
            Module._load = function (request, parent) {

                if (request === '../../../lib/logger') {
                    info = ModuleIdentity.scan(request, parent);
                }
                return load.apply(this, arguments);
            };

            require('../../../lib/logger');
            expect(info).to.exist();
            expect(info.core).to.be.false();
            expect(info.internal).to.be.true();
            expect(info.relativePath).to.not.exist();
            done();
        });
    });
});
