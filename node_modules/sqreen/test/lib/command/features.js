/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

describe('Command', () => {

    describe('features', () => {

        it('should change the features', { plan: 7 }, (done) => {

            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                },
                '../events/action': {
                    enableBatch: function (payload) {

                        if (payload.batch_size) {
                            expect(payload.batch_size).to.equal(1);
                        }
                        else {
                            expect(payload.max_staleness).to.equal(1000);
                        }
                    }
                },
                '../agent': {
                    heartBeatLoopStarter: function (payload) {

                        expect(payload.firstInterval).to.equal(15000);
                    }
                },
                '../metric/default': {
                    enableCallCount: function (value) {

                        expect(value).to.equal(55);
                    }
                }
            });

            const res = Features.change([
                {
                    poney: 10,
                    heartbeat_delay: 15,
                    batch_size: 1,
                    max_staleness: 1,
                    call_counts_metrics_period: 55,
                    whitelisted_metric: false
                }
            ]);
            expect(res).to.equal({
                was: { whitelisted_metric: true },
                now: {
                    heartbeat_delay: 15,
                    batch_size: 1,
                    max_staleness: 1,
                    call_counts_metrics_period: 55,
                    whitelisted_metric: false
                }
            });

            expect(Features.read()).to.equal({
                heartbeat_delay: 15,
                batch_size: 1,
                max_staleness: 1,
                call_counts_metrics_period: 55,
                whitelisted_metric: false
            });

            done();
        });

        it('should change the features and disable batch', { plan: 5 }, (done) => {

            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                },
                '../events/action': {
                    disableBatch: function () {

                        expect(true).to.be.true(); // ensure call
                    }
                },
                '../agent': {
                    heartBeatLoopStarter: function (payload) {

                        expect(payload.firstInterval).to.equal(15000);
                    }
                }
            });

            const res = Features.change([
                {
                    poney: 10,
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1
                }
            ]);
            expect(res).to.equal({
                was: { whitelisted_metric: true },
                now: {
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1,
                    whitelisted_metric: true
                }
            });

            expect(Features.read()).to.equal({
                heartbeat_delay: 15,
                batch_size: 0,
                max_staleness: 1,
                whitelisted_metric: true
            });

            done();
        });

        it('should change the features and disable batch', { plan: 5 }, (done) => {

            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                },
                '../events/action': {
                    disableBatch: function () {

                        expect(true).to.be.true(); // ensure call
                    }
                },
                '../agent': {
                    heartBeatLoopStarter: function (payload) {

                        expect(payload.firstInterval).to.equal(15000);
                    }
                }
            });

            const res = Features.change(
                {
                    poney: 10,
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1
                }
            );
            expect(res).to.equal({
                was: { whitelisted_metric: true },
                now: {
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1,
                    whitelisted_metric: true
                }
            });

            expect(Features.read()).to.equal({
                heartbeat_delay: 15,
                batch_size: 0,
                max_staleness: 1,
                whitelisted_metric: true
            });

            done();
        });
    });
});
