/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');
const Command = require('../../../lib/command/index');

describe('Command.executor', () => {

    describe('execute', () => {

        it('should not run an unknown command', { plan: 2 }, (done) => {

            const MockedCommand = Proxyquire('../../../lib/command/index', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        expect(err).to.be.an.instanceof(Error);
                        done();
                    }
                }
            });

            MockedCommand.execute({ name: 'name', uuid: 'kashhdfkas' });
        });

        it('should not run a command without uuid', { plan: 1 }, (done) => {


            Command.execute({ name: 'name' })
                .then((res) => {

                    expect(res).to.not.exist();
                    done();
                });
        });

        it('should run an instrumentation enable command at login', { plan: 1 }, (done) => {

            Command.execute({ name: 'instrumentation_enable', uuid: '1', pack_id: 'a'}, true)
                .then(() => {

                    const res = Command.getResponses();

                    expect(res).to.equal({
                        '1': {
                            status: true,
                            output: 'a'
                        }
                    });
                    done();
                });
        });

        it('should not run a command without name', { plan: 1 }, (done) => {


            Command.execute({ })
                .then((res) => {

                    expect(res).to.not.exist();
                    done();
                });
        });

        it('should run an known command', { plan: 2 }, (done) => {

            const MockedCommand = require('../../../lib/command/index');

            MockedCommand.execute({ name: 'mock', uuid: 'aaa', params: [] })
                .then(() => {

                    const response = MockedCommand.getResponses();
                    expect(response.aaa).to.exist();
                    expect(response.aaa.status).to.be.true();

                    done();
                });
        });

        it('should run an known command but could not report because sqreen is not started', { plan: 1 }, (done) => {

            const MockedCommand = Proxyquire('../../../lib/command/index', {
                '../agent': {
                    STARTED: () => false,
                    SESSION_ID: () => 'session'
                }
            });

            MockedCommand.execute({ name: 'mock', uuid: 'aaa', params: [] })
                .then((res) => {

                    expect(res).to.not.exist();
                    done();
                });
        });

        it('should run an known command that failed', { plan: 1 }, (done) => {

            const MockedCommand = Proxyquire('../../../lib/command/index', {
                '../agent': {
                    STARTED: () => true,
                    SESSION_ID: () => 'session'
                },
                '../exception': {
                    report: function (err) {

                        return Promise.reject(err);
                    }
                }
            });

            MockedCommand.execute({ name: 'mock_fail', uuid: 'aaa', params: [] })
                .catch((res) => {

                    expect(res).to.not.exist();
                    done();
                });
        });

        it('should run an known command that failed with err', { plan: 1 }, (done) => {

            const MockedCommand = Proxyquire('../../../lib/command/index', {
                '../agent': {
                    STARTED: () => true,
                    SESSION_ID: () => 'session'
                },
                '../exception': {
                    report: function (err) {

                        return Promise.reject(err);
                    }
                }
            });

            MockedCommand.execute({ name: 'mock_fail_err', uuid: 'aaa', params: [] })
                .catch((res) => {

                    expect(res).to.exist();
                    done();
                });
        });

        it('should run an known command but could not report because sqreen there is no token', { plan: 1 }, (done) => {

            const MockedCommand = Proxyquire('../../../lib/command/index', {
                '../agent': {
                    STARTED: () => true,
                    SESSION_ID: () => null
                }
            });

            MockedCommand.execute({ name: 'mock', uuid: 'aaa', params: [] })
                .then((res) => {

                    expect(res).to.not.exist();
                    done();
                });
        });


    });
});

