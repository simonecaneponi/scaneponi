/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

describe('Metric report', () => {

    describe('report', () => {

        it('should report a list of observations at second try', { plan: 2 }, (done) => {

            const Report = Proxyquire('../../../lib/metric/report', {
                './index': {
                    getAllReports: function () {

                        return ['a'];
                    }
                },
                '../backend': {
                    metrics: function (id, payload) {

                        if (payload.metrics.length === 2) {
                            expect(id).to.equal('10');
                            expect(payload.metrics).to.equal(['a', 'a']);
                            done();
                            return Promise.resolve();
                        }
                        return Promise.reject();
                    }
                },
                '../agent': {
                    STARTED: () =>  true,
                    SESSION_ID: () => '10'
                }
            });

            Report.report();

            setTimeout(() => Report.report(), 200);

        });

        it('should report a list of observations at second try (and there is no metric available)', { plan: 2 }, (done) => {

            let call = 0;
            const Report = Proxyquire('../../../lib/metric/report', {
                './index': {
                    getAllReports: function () {

                        if (call === 0) {
                            call++;
                            return null;
                        }
                        return ['a'];
                    }
                },
                '../backend': {
                    metrics: function (id, payload) {

                        expect(id).to.equal('10');
                        expect(payload.metrics).to.equal(['a']);
                        done();
                        return Promise.resolve();
                    }
                },
                '../agent': {
                    STARTED: () =>  true,
                    SESSION_ID: () => '10'
                }
            });

            Report.report();

            setTimeout(() => Report.report(), 200);

        });

        it('should fail', { plan: 0 }, (done) => {

            const Report = Proxyquire('../../../lib/metric/report', {
                './index': {
                    getAllReports: function () {

                        return ['a'];
                    }
                },
                '../backend': {
                    metrics: function () {

                        done(new Error('should have failed'));
                        return Promise.resolve();
                    }
                },
                '../agent': {
                    STARTED: () =>  false,
                    SESSION_ID: () => '10'
                }
            });

            Report.report();
            done();
        });

        it('should fail', { plan: 0 }, (done) => {

            const Report = Proxyquire('../../../lib/metric/report', {
                './index': {
                    getAllReports: function () {

                        return ['a'];
                    }
                },
                '../backend': {
                    metrics: function () {

                        done(new Error('should have failed'));
                        return Promise.resolve();
                    }
                },
                '../agent': {
                    STARTED: () =>  true,
                    SESSION_ID: () => ''
                }
            });

            Report.report();
            done();
        });

    });

});
