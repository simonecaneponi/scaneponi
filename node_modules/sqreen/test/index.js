/**
 * Copyright (c) 2016 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
// const beforeEach = lab.beforeEach;
// const afterEach = lab.afterEach;
const expect = Code.expect;
//
// const Proxyquire = require('proxyquire');

describe.skip('index', () => {

    describe('Need to find a testing strategy', () => {

        it('should do nothing', (done) => done(new Error('fail')));

    });
});

describe('tracinghook', () => {

    it('should trace calls and prevent request because of holder.request', { plan: 4 }, (done) => {

        const Proxyquire = require('proxyquire');
        const EventEmitter = require('events');

        const TracingM = Proxyquire('../lib/instrumentation/hooks/tracingHook', {
            '../../util': {
                getXFFOrRemoteAddress: function () {

                    return '127.0.0.1';
                }
            },
            '../whitelist': {
                pathIsWhiteListed: function () {

                    return '';
                }
            },
            '../../metric': {
                addObservations: function () {

                    throw new Error('should have not been called');
                }
            }
        });

        const Server = function Server() {

            EventEmitter.apply(this, arguments);
        };
        const Util = require('util');
        Util.inherits(Server, EventEmitter);

        const module = { Server };
        TracingM.enable(module, { name: 'http_10' });

        const Director = require('../lib/instrumentation/sqreenDirector');

        Director.update({
            moduleName: 'http_10',
            methodName: 'Server.on:request',
            build: function () {

                this.params = {
                    preCbs: [
                        {
                            method: function () {

                                expect(1).to.equal(1);
                                return { status: 'raise' };
                            }

                        }
                    ]
                };
            },
            params: {}
        });

        const server = new module.Server();

        const _req = new EventEmitter();
        _req.name = 'req';
        const _res = new EventEmitter();
        _res.name = 'res';

        _res.writeHead = function (stat) {

            expect(stat).to.equal(500);
        };
        _res.end = function () {

            expect(1).to.equal(1);
        };
        _req.socket = {};
        _req.socket.end = function () {

            expect(1).to.equal(1);
            done();
        };

        server.addListener('request', () => {

            return done(new Error('should not have been called'));

        });

        server.emit('request', _req, _res);
    });
});
